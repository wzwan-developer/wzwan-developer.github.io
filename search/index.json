[{"content":"文章内容 To find the correspondences among different LiDAR scans, we assume the initial base LiDAR trajectory $\\mathcal{S}$, LiDAR extrinsic $\\mathcal{E}_L$, and camera extrinsic $\\mathcal{E}_C$ are available. The initial base LiDAR trajectory $\\mathcal{S}$ could be obtained by an online LiDAR SLAM (e.g., [3]), and the initial extrinsic could be obtained from the CAD design or a rough Hand-Eye calibration [14]. Our previous work [5] extracts edge and plane feature points from each LiDAR scan and matches them to the nearby edge and plane points in the map by a $k$-nearest neighbor search ($k-NN$). This would repeatedly build a $k$-d tree of the global map at each iteration. In this paper, we use a more efficient voxel map proposed in [4] to create correspondences among all LiDAR scans.\n为了找到不同雷达扫描之间的对应关系，我们假设初始的基准雷达轨迹$\\mathcal{S}$、雷达外参$\\mathcal{E}_L$、相机外参$\\mathcal{E}_C$是可用的。初始的基准雷达轨迹$\\mathcal{S}$可以通过实时雷达SLAM获得，而初始的外参可以通过CAD设计或者从粗略的手眼标定中获得。我们的前期工作，从每个雷达扫描中提取边缘和平面特征，并通过最邻域搜索，将他们匹配到地图中的临近边缘和平面。这会在每次迭代中重复构建全局地图的$k$-d树，在本文中，我们使用在文献4中提出的一种更为高效的体素地图来创建所有雷达扫描之间的对应关系。\nThe voxel map is built by cutting the point cloud (registered using the current $\\mathcal{S}$ and $\\mathcal{E}_L$) into small voxels such that all points in a voxel roughly lie on a plane (with some adjustable tolerance). The main problem of the fixed-resolution voxel map is that if the resolution is high, the segmentation would be too time-consuming, while if the resolution is too low, multiple small planes in the environments falling into the same voxel would not be segmented. To best adapt to the environment, we implement an adaptive voxelization process. More specifically, the entire map is first cut into voxels with a pre-set size (usually large, e.g., 4m). Then for each voxel, if the contained points from all LiDAR scans roughly form a plane (by checking the ratio between eigenvalues), it is treated as a planar voxel; otherwise, they will be divided into eight octants, where each will be examined again until the contained points roughly form a plane or the voxel size reaches the pre-set minimum lower bound. Moreover, the adaptive voxelization is performed directly on the LiDAR raw points, so no prior feature points extraction is needed as in [5].\n体素地图通过将点云（使用当前的 $\\mathcal{S}$和 $\\mathcal{E}_L$ 进行配准）切割成小的体素来构建，使得体素内的所有点大致位于同一平面上（具有一定的可调容差）。固定分辨率体素图的主要问题是，如果分辨率太高，分割将会非常耗时；而如果分辨率太低，环境中多个小平面落在同一个体素内时则无法进行分割。为了更好地适应环境，我们实现了自适应体素化过程。 具体来说，整个地图首先被切割成预设大小的体素（通常较大，例如4米）。然后对于每个体素，如果所有LiDAR扫描中包含的点大致形成一个平面（通过检查特征值之间的比率来判断），则将其视为平面体素；否则，这些体素将被分成八个八分之一体素（octants），每个都将再次进行检查，直到包含的点大致形成一个平面，或者体素尺寸达到预设的最小下限。此外，自适应体素化直接在LiDAR的原始点上执行，因此不需要像文献[5]那样预先提取特征点。\nFig. 3 shows a typical result of the adaptive voxelization process in a complicated campus environment. As can be seen, this process is able to segment planes of different sizes, including large planes on the ground, medium planes on the building walls, and tiny planes on tree crowns. Fig. 3: A) LiDAR point cloud segmented with the adaptive voxelization. Points within the same voxel are colored identically. The detailed adaptive voxelization of points in the dashed white rectangle could be viewed in B) colored points and C) original points. The default size for the initial voxelization is 4m, and the minimum voxel size is 0.25m.\n图3展示了一个复杂校园环境中自适应体素化过程的典型结果。如图所示，该过程能够分割出不同大小的平面，包括地面上的大平面、建筑物墙面上的中等平面以及树冠上的小平面。 图3：(A) 使用自适应体素化分割的LiDAR点云。同一体素内的点被赋予相同的颜色。白色虚线矩形区域内的详细自适应体素化效果可以在 (B) 彩色点云和 (C) 原始点云中查看。初始体素化的默认大小为4米，而最小的体素大小为0.25米。\n相关理论 论文中关于自适应体素并未提及到重要信息，但是提到了参考文献4《BALM: Bundle Adjustment for Lidar Mapping》。\n自适应体素化 我们在默认大小的3D空间中重复体素化，如果当前体素中的所有特征点都位于平面，则将当前体素与包含的特征点一起保存在内存中；否则，将当前体素分解为八个八分体，并继续检查每个八分体直到达到最小尺寸。在具体实现过程中有以下细节：\n如果一个体素内包含太多的特征点，则会导致文章《Chapter 01: Multi-LiDAR Extrinsic Calibration》中推导过程章节中二阶闭式导数中的Hessian矩阵维度过高，在这种情况下，我们可以将点进行平均，以实现降采样但不降低映射一致性； 同时，二阶闭式导数中的Hessian矩阵推导过程中提到$\\lambda_m\\ne\\lambda_n$,因此当遇到$\\lambda$的代数多重性大于1的体素需要跳过（忽略）； 只需检查体素所包含的点，是否位于同一平面时允许更大的方差，则能自然地扩展到非平面特征（BLAM只提到了平面特征和边缘特征）； 设置了两个条件来停止递归体素化：一个是树的最大深度，另一个是体素的最小点数。 其中，判断体素是否为平面的方法是计算体素内所有的点云的协方差矩阵，判断最大特征值与最小特征值的比值是否大于一定的阈值，如果大于则为平面：\n首先计算中心点$p_c$,即所有点的均值点,如下所示： $$ p_c=\\frac{1}{N}\\sum_{i=1}^{N}p_i $$ 接着计算协方差矩阵： $$ \\begin{align*} C=\\frac{1}{N}\\sum_{i=1}^{N}\\big(p_i - c\\big)\\big(p_i - c\\big)^T\\\\ =\\frac{1}{N}\\sum_{i=1}^{N}\\big(p_ip_i^T-p_ic^T-cp_i^T+cc^T\\big)\\\\ =\\frac{1}{N}\\sum_{i=1}^{N}p_ip_i^T-\\frac{1}{N}\\sum_{i=1}^{N}p_ic^T -c\\big(\\frac{1}{N}\\sum_{i=1}^{N}p_i\\big)^T+cc^T\\\\ =\\frac{1}{N}\\sum_{i=1}^{N}p_ip_i^T-cc^T-cc^T+cc^T\\\\ =\\frac{1}{N}\\sum_{i=1}^{N}p_ip_i^T-cc^T \\end{align*} $$八叉树数据结构 通过雷达获取的点云数据，具有数据量大、分布不均匀等特点。点云数据主要是表征目标表面的海量点集合，并不具备传统网格数据的集合拓扑信息。所以点云数据处理中最为核心的问题就是建立离散点间的拓扑关系，实现基于邻域关系的快速查找。\n建立空间索引在点云数据处理中已被广泛应用，常见空间索引一般是自顶向下逐级划分空间的各种空间索引结构，比较有代表性的包括 BSP树、 KD树、 KDB树、 R树、 R+树、 CELL树、四叉树和八叉树等索引结构，而在这些结构中KD树和八叉树在3D点云数据组织中应用较为广泛。\n八叉树（Octree）是一种用于描述三维空间的树状数据结构。八叉树的每个节点表示一个正方体的体积元素，每个节点有8个子节点，这八个子节点所表示的体积元素加在一起等于父节点的体积。一般中心点作为节点的分叉中心。八叉树若不为空树的话，树中任一节点的子节点恰好只会是8个或0个，不会是0或8以外的数目。八叉树叶子节点代表了分辨率最高的情况。例如分辨率设成0.01m，那么每个叶子就是一个1cm见方的小方块。\n代码详解 多激光雷达标定的具体实现与论文是有差异的，被拆为三步实现以降低维度，每步都会涉及的自适应体素化，其代码大同小异，本文代码片段节选自第三步骤，具体参考global.hpp和global.cpp。\nOCTO_TREE类class OCTO_TREE { public: std::vector\u0026lt;vector_vec3d*\u0026gt; baseOriginPc;//基准雷达的原始点云 std::vector\u0026lt;vector_vec3d*\u0026gt; baseTransPc; std::vector\u0026lt;std::vector\u0026lt;vector_vec3d*\u0026gt;\u0026gt; refOriginPc; // n个参考雷达的原始点云 std::vector\u0026lt;std::vector\u0026lt;vector_vec3d*\u0026gt;\u0026gt; refTransPc; OCTO_TREE* leaves[8]; int win_size, //帧数 ref_size, //参考雷达的个数 points_size, layer; OT_STATE octo_state;//八叉树节点类型 double voxel_center[3]; double quater_length, eigen_ratio;//面特征的阈值 Eigen::Vector3d value_vector; OCTO_TREE(int window_size, double ref_lidar_size, double eigen_limit): win_size(window_size), ref_size(ref_lidar_size), eigen_ratio(eigen_limit) { octo_state = UNKNOWN; layer = 0; for(int i = 0; i \u0026lt; 8; i++) leaves[i] = nullptr; for(int i = 0; i \u0026lt; win_size; i++) { baseOriginPc.emplace_back(new vector_vec3d()); baseTransPc.emplace_back(new vector_vec3d()); } for(int j = 0; j \u0026lt; ref_size; j++) { std::vector\u0026lt;vector_vec3d*\u0026gt; refOriginPc_, refTransPc_; for(int i = 0; i \u0026lt; win_size; i++) { refOriginPc_.emplace_back(new vector_vec3d()); refTransPc_.emplace_back(new vector_vec3d()); } refOriginPc.emplace_back(refOriginPc_); refTransPc.emplace_back(refTransPc_); } // feat_eigen_limit = 10; } ~OCTO_TREE() { for(int i = 0; i \u0026lt; win_size; i++) { delete (baseOriginPc[i]); delete (baseTransPc[i]); } baseOriginPc.clear(); baseTransPc.clear(); for(int i = 0; i \u0026lt; ref_size; i++) { for(int j = 0; j \u0026lt; win_size; j++) { delete refOriginPc[i][j]; delete refTransPc[i][j]; } refOriginPc[i].clear(); refTransPc[i].clear(); } refOriginPc.clear(); refTransPc.clear(); for(int i = 0; i \u0026lt; 8; i++) if(leaves[i] != nullptr) delete leaves[i]; } /** * @brief 对八叉树节点进行分割 **/ void recut() { // 如果当前八叉树节点的状态未知，则进行分割决策 if (octo_state == UNKNOWN) { points_size = 0; for (int i = 0; i \u0026lt; win_size; i++) { points_size += baseOriginPc[i]-\u0026gt;size(); for (int j = 0; j \u0026lt; ref_size; j++) points_size += refOriginPc[j][i]-\u0026gt;size(); } // 两个停止递归体素化的条件之一：如果点的总大小小于最小值，则将当前节点标记为中间节点并返回 if (points_size \u0026lt; MIN_PS) { octo_state = MID_NODE; return; } // 判断是否满足平面条件，如果满足则将当前节点标记为平面节点并返回 if (judge_eigen()) { octo_state = PLANE; return; } else { // 两个停止递归体素化的条件之一： 如果当前层达到限制，则将当前节点标记为中间节点并返回 if (layer == LAYER_LIMIT) { octo_state = MID_NODE; return; } // 遍历窗口内的每个点云，根据点的位置将其分配到相应的子节点 for (int i = 0; i \u0026lt; win_size; i++) { uint pt_size = baseTransPc[i]-\u0026gt;size(); for (size_t j = 0; j \u0026lt; pt_size; j++) { int xyz[3] = {0, 0, 0}; for (size_t k = 0; k \u0026lt; 3; k++) if ((*baseTransPc[i])[j][k] \u0026gt; voxel_center[k]) xyz[k] = 1; int leafnum = 4 * xyz[0] + 2 * xyz[1] + xyz[2]; // 如果当前子节点为空，则创建一个新的八叉树节点，并设置其参数 if (leaves[leafnum] == nullptr) { leaves[leafnum] = new OCTO_TREE(win_size, ref_size, eigen_ratio); leaves[leafnum]-\u0026gt;voxel_center[0] = voxel_center[0] + (2 * xyz[0] - 1) * quater_length; leaves[leafnum]-\u0026gt;voxel_center[1] = voxel_center[1] + (2 * xyz[1] - 1) * quater_length; leaves[leafnum]-\u0026gt;voxel_center[2] = voxel_center[2] + (2 * xyz[2] - 1) * quater_length; leaves[leafnum]-\u0026gt;quater_length = quater_length / 2; leaves[leafnum]-\u0026gt;layer = layer + 1; } leaves[leafnum]-\u0026gt;baseOriginPc[i]-\u0026gt;emplace_back((*baseOriginPc[i])[j]); leaves[leafnum]-\u0026gt;baseTransPc[i]-\u0026gt;emplace_back((*baseTransPc[i])[j]); } for (int k = 0; k \u0026lt; ref_size; k++) { pt_size = refTransPc[k][i]-\u0026gt;size(); for (size_t j = 0; j \u0026lt; pt_size; j++) { int xyz[3] = {0, 0, 0}; for (size_t a = 0; a \u0026lt; 3; a++) if ((*refTransPc[k][i])[j][a] \u0026gt; voxel_center[a]) xyz[a] = 1; int leafnum = 4 * xyz[0] + 2 * xyz[1] + xyz[2]; if (leaves[leafnum] == nullptr) { leaves[leafnum] = new OCTO_TREE(win_size, ref_size, eigen_ratio); leaves[leafnum]-\u0026gt;voxel_center[0] = voxel_center[0] + (2 * xyz[0] - 1) * quater_length; leaves[leafnum]-\u0026gt;voxel_center[1] = voxel_center[1] + (2 * xyz[1] - 1) * quater_length; leaves[leafnum]-\u0026gt;voxel_center[2] = voxel_center[2] + (2 * xyz[2] - 1) * quater_length; leaves[leafnum]-\u0026gt;quater_length = quater_length / 2; leaves[leafnum]-\u0026gt;layer = layer + 1; } leaves[leafnum]-\u0026gt;refOriginPc[k][i]-\u0026gt;emplace_back((*refOriginPc[k][i])[j]); leaves[leafnum]-\u0026gt;refTransPc[k][i]-\u0026gt;emplace_back((*refTransPc[k][i])[j]); } } } } } for (size_t i = 0; i \u0026lt; 8; i++) if (leaves[i] != nullptr) leaves[i]-\u0026gt;recut(); } /** * @brief 计算和判断给定点云数据的协方差矩阵的特征值的比值 是本文2.1节的协方差矩阵计算的具体实现 * @return bool 根据特征值的比值判断返回true或false */ bool judge_eigen() { Eigen::Matrix3d covMat(Eigen::Matrix3d::Zero()); Eigen::Vector3d center(0, 0, 0); uint pt_size; for (int i = 0; i \u0026lt; win_size; i++) { pt_size = baseTransPc[i]-\u0026gt;size(); for (size_t j = 0; j \u0026lt; pt_size; j++) { covMat += (*baseTransPc[i])[j] * (*baseTransPc[i])[j].transpose(); center += (*baseTransPc[i])[j]; } for (int k = 0; k \u0026lt; ref_size; k++) { pt_size = refTransPc[k][i]-\u0026gt;size(); for (size_t j = 0; j \u0026lt; pt_size; j++) { covMat += (*refTransPc[k][i])[j] * (*refTransPc[k][i])[j].transpose(); center += (*refTransPc[k][i])[j]; } } } //计算中心点 center /= points_size; //计算协方差矩阵 covMat = covMat / points_size - center * center.transpose(); /* saes.eigenvalues()[2] is the biggest */ Eigen::SelfAdjointEigenSolver\u0026lt;Eigen::Matrix3d\u0026gt; saes(covMat); value_vector = saes.eigenvalues(); // 判断特征值的比值是否大于给定的阈值，是则返回true，否则返回false if (eigen_ratio \u0026lt; saes.eigenvalues()[2] / saes.eigenvalues()[0]) return true; return false; } /** * @brief 递归去将平面节点传递给LM优化器 **/ void feed_pt(LM_OPTIMIZER \u0026amp;lm_opt) { if (octo_state == PLANE) lm_opt.push_voxel(baseOriginPc, refOriginPc); else for (int i = 0; i \u0026lt; 8; i++) if (leaves[i] != nullptr) leaves[i]-\u0026gt;feed_pt(lm_opt); } }; downsample_voxel体素下采样函数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 /** * @brief 基于体素网格对点云进行下采样 * 本文自适应体素化章节提到，如果一个体素内包含太多点， * 则会导致二阶闭式导数中的Hessian矩阵维度过高，在这种 * 情况下可以进行将点进行一下平均，以降低维度 * @param pc 输入和输出的点云数据 * @param voxel_size 体素网格的大小，决定了下采样的精度 * @return */ void downsample_voxel(pcl::PointCloud\u0026lt;PointType\u0026gt;\u0026amp; pc, double voxel_size) { // 检查体素大小是否过小，如果小于0.01则不进行下采样 if (voxel_size \u0026lt; 0.01) return; // 使用哈希表存储每个体素网格中的点，以实现快速查找和去重 std::unordered_map\u0026lt;VOXEL_LOC, M_POINT\u0026gt; feature_map; size_t pt_size = pc.size(); // 遍历每个点，计算其在体素网格中的位置，并将点加入相应的体素网格 for (size_t i = 0; i \u0026lt; pt_size; i++) { PointType \u0026amp;pt_trans = pc[i]; float loc_xyz[3]; // 计算点在每个维度上所在的体素网格索引 for (int j = 0; j \u0026lt; 3; j++) { loc_xyz[j] = pt_trans.data[j] / voxel_size; // 如果点的体素网格索引小于0，则减去1，保证索引非负 if (loc_xyz[j] \u0026lt; 0) loc_xyz[j] -= 1.0; } // 构造体素网格位置的键 VOXEL_LOC position((int64_t)loc_xyz[0], (int64_t)loc_xyz[1], (int64_t)loc_xyz[2]); // 在哈希表中查找当前体素网格位置 auto iter = feature_map.find(position); if (iter != feature_map.end()) { // 如果当前体素网格已存在点，则累加点的坐标，并增加点的计数 iter-\u0026gt;second.xyz[0] += pt_trans.x; iter-\u0026gt;second.xyz[1] += pt_trans.y; iter-\u0026gt;second.xyz[2] += pt_trans.z; iter-\u0026gt;second.count++; } else { // 如果当前体素网格不存在点，则创建新的体素网格点，并加入哈希表 M_POINT anp; anp.xyz[0] = pt_trans.x; anp.xyz[1] = pt_trans.y; anp.xyz[2] = pt_trans.z; anp.count = 1; feature_map[position] = anp; } } // 重新计算下采样后的点云大小，并清空原有数据 pt_size = feature_map.size(); pc.clear(); pc.resize(pt_size); // 遍历哈希表，计算每个体素网格点的平均坐标，并填充到输出点云数据中 size_t i = 0; for (auto iter = feature_map.begin(); iter != feature_map.end(); ++iter) { pc[i].x = iter-\u0026gt;second.xyz[0] / iter-\u0026gt;second.count; pc[i].y = iter-\u0026gt;second.xyz[1] / iter-\u0026gt;second.count; pc[i].z = iter-\u0026gt;second.xyz[2] / iter-\u0026gt;second.count; i++; } } cut_voxel体素裁剪函数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 /** * @brief 切割体素函数，用于处理特征点云并构建体素特征映射 * * @param feature_map 特征映射，键为体素位置，值为体素树指针 * @param feature_pts 特征点云数据指针 * @param q 旋转矩阵，表示点云的旋转情况 在本文中来源于初始可用的基准雷达的轨迹$\\mathcal{S}$ * @param t 平移向量，表示点云的平移情况 在本文中来源于初始可用的基准雷达的轨迹$\\mathcal{S}$ * @param f_head 用于特征存储的头部索引 * @param baselidar_sz 基础激光雷达数据的体素尺寸 * @param exlidar_sz 扩展激光雷达数据的体素尺寸 * @param eigen_threshold 特征值阈值，用于体素特征提取 * @param exlidar_n 扩展激光雷达的编号，默认为0 * @param is_base_lidar 标记当前处理的是基础激光雷达数据还是扩展激光雷达数据，默认为true */ void cut_voxel(unordered_map\u0026lt;VOXEL_LOC, OCTO_TREE *\u0026gt; \u0026amp;feature_map, pcl::PointCloud\u0026lt;PointType\u0026gt;::Ptr feature_pts, Eigen::Quaterniond q, Eigen::Vector3d t, int f_head, int baselidar_sz, int exlidar_sz, double eigen_threshold, int exlidar_n = 0, bool is_base_lidar = true) { uint pt_size = feature_pts-\u0026gt;size(); for (uint i = 0; i \u0026lt; pt_size; i++) { PointType \u0026amp;pt = feature_pts-\u0026gt;points[i]; Eigen::Vector3d pt_origin(pt.x, pt.y, pt.z); // 将点进行旋转和平移变换,转化到世界坐标系中 Eigen::Vector3d pt_trans = q * pt_origin + t; // 计算点在体素网格中的位置 float loc_xyz[3]; for (int j = 0; j \u0026lt; 3; j++) { loc_xyz[j] = pt_trans[j] / voxel_size; if (loc_xyz[j] \u0026lt; 0) loc_xyz[j] -= 1.0; } // 构建体素位置键 VOXEL_LOC position((int64_t) loc_xyz[0], (int64_t) loc_xyz[1], (int64_t) loc_xyz[2]); // 检查该体素位置是否已存在于特征映射中 auto iter = feature_map.find(position); if (iter != feature_map.end()) { // 如果存在，则向该体素中添加点数据 if (is_base_lidar) { iter-\u0026gt;second-\u0026gt;baseOriginPc[f_head]-\u0026gt;emplace_back(pt_origin); iter-\u0026gt;second-\u0026gt;baseTransPc[f_head]-\u0026gt;emplace_back(pt_trans); } else { iter-\u0026gt;second-\u0026gt;refOriginPc[exlidar_n][f_head]-\u0026gt;emplace_back(pt_origin); iter-\u0026gt;second-\u0026gt;refTransPc[exlidar_n][f_head]-\u0026gt;emplace_back(pt_trans); } } else { // 如果不存在，则创建新的体素树，并向其中添加点数据 OCTO_TREE *ot = new OCTO_TREE(baselidar_sz, exlidar_sz, eigen_threshold); if (is_base_lidar) { ot-\u0026gt;baseOriginPc[f_head]-\u0026gt;emplace_back(pt_origin); ot-\u0026gt;baseTransPc[f_head]-\u0026gt;emplace_back(pt_trans); } else { ot-\u0026gt;refOriginPc[exlidar_n][f_head]-\u0026gt;emplace_back(pt_origin); ot-\u0026gt;refTransPc[exlidar_n][f_head]-\u0026gt;emplace_back(pt_trans); } // 设置体素树的中心点和长度 ot-\u0026gt;voxel_center[0] = (0.5 + position.x) * voxel_size; ot-\u0026gt;voxel_center[1] = (0.5 + position.y) * voxel_size; ot-\u0026gt;voxel_center[2] = (0.5 + position.z) * voxel_size; ot-\u0026gt;quater_length = voxel_size / 4.0; ot-\u0026gt;layer = 0; // 将新的体素树添加到特征映射中 feature_map[position] = ot; } } } 参考文献 [1]《Targetless Extrinsic Calibration of Multiple Small FoV LiDARs and Cameras using Adaptive Voxelization》\n[2]《BALM: Bundle Adjustment for Lidar Mapping》\n[3]《octree八叉树数据结构原理与实现》\n","date":"2024-09-16T15:55:17+08:00","image":"https://wzwan-developer.github.io/p/mlcc/00/lidar_voxel_hu16969779438898434220.png","permalink":"https://wzwan-developer.github.io/p/mlcc/00/","title":"Chapter 00: Adaptive Voxelization"},{"content":"文章内容 With adaptive voxelization, we can obtain a set of voxels of different sizes. Each voxel contains points that are roughly on a plane and creates a planar constraint for all LiDAR poses that have points in this voxel. More specifically, considering the $l-th$ voxel consisting of a group of points $\\mathcal{P}_{l}={_{}^{G}P_{L_{i},t_{j}}}$ scanned by $L_{i} \\in \\mathcal{L}$ at times $t_{j} \\in \\mathcal{T}$. We define a point cloud consistency indicator $_{c_{l}}(_{L_{i}}^{G}T_{t_{j}})$ which forms a factor on $\\mathcal{S}$ and $\\mathcal{E}_{L}$ shown in Fig. 4(a). Then, the base LiDAR trajectory and extrinsic are estimated by optimizing the factor graph. A natural choice for the consistency indicator $c_{l}(\\cdot)$ would be the summed Euclidean distance between each $_{}^{G}P_{L_{i},t_{j}}$ the plane to be estimated (see Fig. 4(b)). Taking account of all such indicators within the voxel map, we could formulate the problem as $$\\arg\\min_{{\\mathcal{S},\\mathcal{E}_{L},{n}_{l},{q}_{l}}}\\sum_{l}\\underbrace{{\\left(\\frac{1}{N_{l}}\\sum_{k=1}^{{N_{l}}}\\left({n}_{l}^{T}\\left(^{G}{p}_{k}-{q}_{l}\\right)\\right)^{2}\\right)}}_{{l\\mathrm{-th~factor}}}$$， where $_{}^{G}p_{k}\\in \\mathcal{P}_{l}$, $N_{l}$ is the total number of points in $\\mathcal{P}_{l}$, $n_{l}$ is the normal vector of the plane and $q_{l}$ is a point on this plane. Fig.4 :(a) The $l-th$ factor item relating to $\\mathcal{S}$ and $\\mathcal{E}_{L}$ with $L_{i} \\in \\mathcal{L}$ and $t_{j} \\in \\mathcal{T}$ . (b) The distance from the point $_{}^{G}p_{k}$ to the plane $\\pi$.\n通过自适应体素化，我们可以获得一组不同大小的体素。 每个体素包含大致在一个平面上的点，并为所有包含在此体素内的雷达姿态创建一个平面约束。 更具体地说，考虑由$L_{i} \\in \\mathcal{L}$在时刻$t_{j} \\in \\mathcal{T}$扫描的一组点组成的第$l$个体素。 我们定义了一个点云一致性指标$_{c_{l}}(_{L_{i}}^{G}T_{t_{j}})$ ， 它在图4(a)中形成了$\\mathcal{S}$ 和 $\\mathcal{E}_{L}$上的因子。然后，通过优化因子图来估计基准雷达的轨迹和外参。 对于一致性指标$c_{l}(\\cdot)$的一个自然选择是计算每个$_{}^{G}P_{L_{i},t_{j}}$到平面的欧几里得距离之和（见图4(b)）。 考虑到体素图中所有这样的指标，我们可以将问题表述为 $$\\arg\\min_{{\\mathcal{S},\\mathcal{E}_{L},{n}_{l},{q}_{l}}}\\sum_{l}\\underbrace{{\\left(\\frac{1}{N_{l}}\\sum_{k=1}^{{N_{l}}}\\left({n}_{l}^{T}\\left(^{G}{p}_{k}-{q}_{l}\\right)\\right)^{2}\\right)}}_{{l\\mathrm{-th~factor}}}$$ ，其中 $_{}^{G}p_{k}\\in \\mathcal{P}_{l}$，$N_{l}$ 是 $\\mathcal{P}_{l}$中所有点的总点数, $n_{l}$ 是平面的 法向量， $q_{l}$ 是平面中的一点。 Fig.4 :(a) 第$l$ 个因子项，涉及$\\mathcal{S}$ 和 $\\mathcal{E}_{L}$，其中 $L_{i} \\in \\mathcal{L}$ 且 $t_{j} \\in \\mathcal{T}$ 。 (b)点 $_{}^{G}p_{k}$到平面$\\pi$的距离.\nIt is noticed that the optimization variables $(n_{l}, q_{l})$ in (2) could be analytically solved (see Appendix A and the resultant cost function (3) is over the LiDAR pose $_{L_{i}}^{G}T_{t_{j}}$ (hence the base LiDAR trajectory $\\mathcal{S}$ and extrinsic $\\mathcal{E}_{L}$) only, as follows $$ \\arg\\min_{\\mathcal{S},\\mathcal{E}_{L}}\\sum_{l}^{}\\lambda_{3}(A_{l}) $$ where $\\lambda_{3}(A_{l})$ denotes the minimal eigenvalue of matrix $A_{l}$ defined as $$ A_{l}=\\frac{1}{N_{l}}\\sum_{k=1}^{N_{l}}{_{}^{G}p_{k} \\cdot_{}^{G}p_{k}^{T}-q_{l}^{\\ast}\\cdot {q_{l}^{\\ast}}^{T}},q_{l}^{\\ast} =\\frac{1}{N_{l}}\\sum_{k=1}^{N_{l}}{_{}^{G}p_{k}} $$ . To allow efficient optimization in (3), we derive the closedform derivatives w.r.t the optimization variable $x$ up to secondorder (the detailed derivation from (3) to (5) is elaborated in Appendix B): $$\\lambda_3({x}\\boxplus\\delta{x})\\approx\\lambda_3({x})+{\\bar{J}}\\delta{x}+\\frac12\\delta{x}^T{\\bar{H}}\\delta{x}$$ ,where $\\bar{J}$ is the Jacobian matrix, and $\\bar{H}$ is the Hessian matrix. The $\\delta{x}$ is a small perturbation of the optimization variable $x$: $${x}=[\\underbrace{\\cdots_{L_{0}}^{G}{R}_{t_{j}}\\quad L_{0}^{G}{t}_{t_{j}}\\cdots}_{\\mathcal{S}}\\underbrace{\\cdots_{L_{i}}^{L_{0}}{R}_{L_{i}}^{L_{0}}{t}\\cdots}_{\\mathcal{E}_{L}}]$$ .Then the optimal $x^{\\ast}$ could be determined by iteratively solving (6) with the LM method and updating the $\\delta{x}$ to $x$. $$(\\bar{{H}}+\\mu{I}) \\delta{x}=-\\bar{{J}}^T$$ 注意到优化变量$(n_{l}, q_{l})$在方程(2)中可以解析求解（详见附录A）,由此得到的损失函数(3)仅关于雷达姿态$_{L_{i}}^{G}T_{t_{j}}$(即基准雷达轨迹$\\mathcal{S}$和外参$\\mathcal{E}_{L}$),如下所示： $$ \\arg\\min_{\\mathcal{S},\\mathcal{E}_{L}}\\sum_{l}^{}\\lambda_{3}(A_{l}) $$ 其中$\\lambda_{3}(A_{l})$表示矩阵 $A_{l}$的最小特征值， $A_{l}$定义为\n$$ A_{l}=\\frac{1}{N_{l}}\\sum_{k=1}^{N_{l}}{_{}^{G}p_{k} \\cdot_{}^{G}p_{k}^{T}-q_{l}^{\\ast}\\cdot {q_{l}^{\\ast}}^{T}},q_{l}^{\\ast} =\\frac{1}{N_{l}}\\sum_{k=1}^{N_{l}}{_{}^{G}p_{k}}$$ 。为了使式(3)中的优化高效，我们推导了优化变量$x$的二阶闭式导数(从(3)到(5)的详细推导见附录B)： $$\\lambda_3({x}\\boxplus\\delta{x})\\approx\\lambda_3({x})+{\\bar{J}}\\delta{x}+\\frac12\\delta{x}^T{\\bar{H}}\\delta{x}$$ 。其中$\\bar{J}$是雅可比矩阵，$\\bar{H}$是海森矩阵。$\\delta{x}$是优化变量$x$的小扰动： $${x}=[\\underbrace{\\cdots_{L_{0}}^{G}{R}_{t_{j}}\\quad L_{0}^{G}{t}_{t_{j}}\\cdots}_{\\mathcal{S}}\\underbrace{\\cdots_{L_{i}}^{L_{0}}{R}_{L_{i}}^{L_{0}}{t}\\cdots}_{\\mathcal{E}_{L}}]$$ 。然后，最优解$x^{\\ast}$可以通过迭代求解公式(6)并使用LM的方法更新$\\delta{x}$到$x$来确定。 $$(\\bar{{H}}+\\mu{I}) \\delta{x}=-{\\bar{{J}}}^T$$理论推导 损失函数的降维 推导一：BALM论文的思路 $$\\arg\\min_{{\\mathcal{S},\\mathcal{E}_{L},{n}_{l},{q}_{l}}}\\sum_{l}\\underbrace{{\\left(\\frac{1}{N_{l}}\\sum_{k=1}^{{N_{l}}}\\left({n}_{l}^{T}\\left(^{G}{p}_{k}-{q}_{l}\\right)\\right)^{2}\\right)}}_{{l\\mathrm{-th~factor}}}$$ 观察上式可知，由于对于平面参数$\\pi=(n_{l},q_{l})$的依赖，原始误差函数优化的维度很高。因为平面参数$(n_{l},q_{l})$对于不同的平面是有区别的。我们可以对它们进行优化，如下式所示： $$\\arg\\min_{{\\mathcal{S},\\mathcal{E}_{L}}}\\sum_{l}{\\left(\\min_{n_{l},q_{l}}{\\frac{1}{N_{l}}{\\sum_{k=1}^{N_{l}} \\left( n_{l}^{T}\\left( {^{G}p_{k}-q_{l}}\\right)\\right)^{2}}} \\right)} $$ 在$(n_{l},q_{l})$两个平面参数优化过程中可以优先优化$q_{l}$，再优化$n_{l}$，下式为优化$q_{l}$。 $$\\begin{align*}\\arg\\min_{n_{l},q_{l}}{\\frac{1}{N_{l}}{\\sum_{k=1}^{N_{l}} \\left( n_{l}^{T}\\left( {^{G}p_{k}-q_{l}}\\right)\\right)^{2}}} \\\\ = \\arg\\min_{n_{l}}\\left( \\min_{q_{l}}{\\frac{1}{N_{l}}{\\sum_{k=1}^{N_{l}} \\left( n_{l}^{T}\\left( {^{G}p_{k}-q_{l}}\\right)\\right)^{2}}}\\right)\\\\ =\\arg\\min_{n_{l}}n_{l}^{T}\\left( \\min_{q_{l}}{\\frac{1}{N_{l}}{\\sum_{k=1}^{N_{l}} \\left( {^{G}p_{k}-q_{l}}\\right)^{2}}}\\right)n_{l} \\end{align*}$$ 继续简化关于$q_{l}$参数的优化 $$\\begin{align*}\\arg\\min_{q_{l}}{\\frac{1}{N_{l}}{\\sum_{k=1}^{N_{l}} \\left( {^{G}p_{k}-q_{l}}\\right)^{2}}}\\\\ =\\min_{q_{l}}{\\frac{1}{N_{l}}{\\sum_{k=1}^{N_{l}} \\left( {^{G}p_{k}-q_{l}}\\right)\\left( {^{G}p_{k}-q_{l}}\\right)^{T}}}\\end{align*}$$ 需要求当上式最小化是$q_{l}$的最优解，我们需要找到上式梯度为0的$q_{l}$的值，因此我们对上式求关于$q_{l}$的导数，如下所示： $$\\begin{align*}\\frac{\\partial}{\\partial{q_{l}}} \\left( {\\frac{1}{N_{l}}{\\sum_{k=1}^{N_{l}} \\left( {^{G}p_{k}-q_{l}}\\right)\\left( {^{G}p_{k}-q_{l}}\\right)^{T}}}\\right) \\\\ ={\\frac{1}{N_{l}}{\\sum_{k=1}^{N_{l}} {-({^{G}p_{k}-q_{l})}^{T}}-\\left( {^{G}p_{k}-q_{l}}\\right)}}\\\\ = {\\frac{1}{N_{l}}{\\sum_{k=1}^{N_{l}} {-2({^{G}p_{k}-q_{l})}}}}\\\\ =-{\\frac{2}{N_{l}}{\\sum_{k=1}^{N_{l}} {({^{G}p_{k}-q_{l})}}}} \\end{align*}$$ 令上式等于0： $$\\begin{align*}-{\\frac{2}{N_{l}}{\\sum_{k=1}^{N_{l}} {({^{G}p_{k}}-q_{l})}}}=0 \\\\ \\sum_{k=1}^{N_{l}}{({^{G}p_{k}-q_{l}})} =0\\\\ \\sum_{k=1}^{N_{l}}{^{G}p_{k}}-N_{l}q_{l}=0\\\\ N_{l}q_{l}=\\sum_{k=1}^{N_{l}}{^{G}p_{k}}\\\\ q_{l}=\\frac{1}{N_{l}}\\sum_{k=1}^{N_{l}}{^{G}p_{k}} \\end{align*}$$ 由此可知，最优的$q_{l}$是所有$^{G}p_{k}$的均值$q_{l}^{\\ast}$,接下来继续简化$n_{l}$ $$\\begin{align*}\\arg\\min_{n_{l}}n_{l}^{T}\\left( \\min_{q_{l}}{\\frac{1}{N_{l}}{\\sum_{k=1}^{N_{l}} \\left( {^{G}p_{k}-q_{l}}\\right)^{2}}}\\right)n_{l}\\\\ =\\arg\\min_{n_{l}}n_{l}^{T}\\left( {\\frac{1}{N_{l}}{\\sum_{k=1}^{N_{l}} \\left( {^{G}p_{k}-q_{l}^{\\ast}}\\right)^{2}}}\\right)n_{l}\\end{align*}$$ 其中，\n$${\\frac{1}{N_{l}}{\\sum_{k=1}^{N_{l}} \\left( {^{G}p_{k}-q_{l}^{\\ast}}\\right)^{2}}}\\\\ \\Leftrightarrow \\frac{1}{N_{l}}\\sum_{k=1}^{N_{l}}{_{}^{G}p_{k} \\cdot_{}^{G}p_{k}^{T}-q_{l}^{\\ast}\\cdot {q_{l}^{\\ast}}^{T}} $$ 需要注意的是上式中$q_{l}^{\\ast} \\cdot_{}^{G}p_{k}^{T}$与$_{}^{G}p_{k}\\cdot{q_{l}^{\\ast}}^{T}$两个交叉项在最小化过程中不会对优化结果产生影响，所以两式等价。 所以，带入\n$$ A_{l}=\\frac{1}{N_{l}}\\sum_{k=1}^{N_{l}}{_{}^{G}p_{k} \\cdot_{}^{G}p_{k}^{T}-q_{l}^{\\ast}\\cdot {q_{l}^{\\ast}}^{T}},q_{l}^{\\ast} =\\frac{1}{N_{l}}\\sum_{k=1}^{N_{l}}{_{}^{G}p_{k}}$$$$\\begin{align*}\\arg\\min_{n_{l}}n_{l}^{T}\\left( {\\frac{1}{N_{l}}{\\sum_{k=1}^{N_{l}} \\left( {^{G}p_{k}-q_{l}^{\\ast}}\\right)^{2}}}\\right)n_{l}\\\\ =\\arg\\min_{n_{l}}n_{l}^{T}A_{l}n_{l}\\end{align*}$$ 根据瑞利商定理，对矩阵$M$满足如下性质： $$\\lambda_{min}(M)\\le \\frac{x^{T}Mx}{x^{T}x}\\le\\lambda_{max}(M),\\forall{x}\\ne0$$ 则关于误差函数，取得最小化，变量$(n_{l}, q_{l})$的优化为公式\n$$\\begin{align*}\\ =\\lambda_{min}(A_{l})\\\\arg\\min_{n_{l}}n_{l}^{T}\\left( \\min_{q_{l}}{\\frac{1}{N_{l}}{\\sum_{k=1}^{N_{l}} \\left( {^{G}p_{k}-q_{l}}\\right)^{2}}}\\right)n_{l}\\\\ =\\lambda_{3}(A_{l})\\end{align*}$$ 将其带入\n$$\\begin{align*}\\arg\\min_{{\\mathcal{S},\\mathcal{E}_{L}}}\\sum_{l}{\\left(\\min_{n_{l},q_{l}}{\\frac{1}{N_{l}}{\\sum_{k=1}^{N_{l}} \\left( n_{l}^{T}\\left( {^{G}p_{k}-q_{l}}\\right)\\right)^{2}}} \\right)}\\\\ =\\arg\\min_{{\\mathcal{S},\\mathcal{E}_{L}}}\\sum_{l}{\\lambda_{3}(A_{l})}\\end{align*}$$推导二：该论文中的推导思路 后续补充！\n二阶闭式导数的推导 首先引入BALM中两个定理，如下所示:\n定理1 已知：\n$${A}=\\frac1N\\sum_{i=1}^N\\left({p}_i-\\bar{{p}}\\right)\\left({p}_i-\\bar{{p}}\\right)^T,\\bar{{p}}=\\frac{1}{N}\\sum_{i=1}^{N}{p}_{i}$$ 对于一组点$p_{i}\\left(i=1,\\dots,\\right)$和定义的协方差矩阵$A$,假设$A$具有对应于特征向量的$u_{k}\\left(k=1,2,3\\right)$,则有\n$$\\frac{\\partial\\lambda_k}{\\partial{p}_i}=\\frac2N({p}_i-\\bar{{p}})^T{u}_k{u}_k^T$$其中,$\\bar{p}$是$N$个点的均值。\n证明如下：假设点$p_i= [x_{i} \\quad y_{i} \\quad z_{i}]^{T}$以及对应的特征向量矩阵$U={[u_{1} \\quad u_{2} \\quad u_{3} ]}^{T}$。进一步定义$p$是$p_{i}$的一个元素，$p$是$x_{i},y_{i},z_{i}$中其中一个。协方差矩阵$A$可以分解为 $\\Lambda=U^{T}AU$,其中:\n$\\Lambda$是对角矩阵，其对角线元素是特征值, $\\lambda_{1},\\lambda_{2},\\lambda_{3}$。 $U$是一个正交矩阵，其列是$A$的特征向量$u_{1},u_{2},u_{3}$。 对$\\Lambda$求导可得下式： $$ \\frac{\\partial{}\\Lambda}{\\partial{p}}=\\left( \\frac{\\partial{U}}{\\partial{p}}\\right)^{T}AU+U^{T}\\left(\\frac{\\partial{A}}{\\partial{p}}\\right)U+U^{T}A\\left(\\frac{\\partial{U}}{\\partial{p}}\\right)\\tag{式1} $$ 又因为$\\Lambda=U^{T}AU$,可以推导得到\n$$U^{T}A=\\Lambda{}U^{T},AU=U\\Lambda\\tag{式2}$$,将式1带入式2，可得： $$ \\frac{\\partial{}\\Lambda}{\\partial{p}}=\\left( \\frac{\\partial{U}}{\\partial{p}}\\right)^{T}U\\Lambda+U^{T}\\left(\\frac{\\partial{A}}{\\partial{p}}\\right)U+\\Lambda{}U^{T}\\left(\\frac{\\partial{U}}{\\partial{p}}\\right)\\tag{式3} $$ 又因为： $$ U^{T}U=I\\\\ \\Longrightarrow {U^{T}\\frac{\\partial{U}}{\\partial{p}}+\\left(\\frac{\\partial{U}}{\\partial{p}}\\right)^{T}U=0}\\tag{式4} $$ 由此可知，$U^{T}\\frac{\\partial{U}}{\\partial{p}}$是一个反对称矩阵，其对角线元素和0。 因此可得: $$ \\left( \\frac{\\partial{U}}{\\partial{p}}\\right)^{T}U\\Lambda+\\Lambda{}U^{T}\\left(\\frac{\\partial{U}}{\\partial{p}}\\right)=0\\tag{式5} $$ 将式5带入式3中，可得： $$ \\frac{\\partial{}\\Lambda}{\\partial{p}}=U^{T}\\left(\\frac{\\partial{A}}{\\partial{p}}\\right)U\\tag{式6} $$ 又因为$\\lambda_{k}={u_{k}}^{T}Au_{k}$,代入式6可得： $$ \\frac{\\partial{}\\lambda_{k}}{\\partial{p}}={u_{k}}^{T}\\left(\\frac{\\partial{A}}{\\partial{p}}\\right)u_{k}=\\frac{\\partial{{u_{k}}^{T}Au_{k}}}{\\partial{p}}\\tag{式7} $$ 此时将标量$p$换回为向量$p_{i}$,得到下式 $$ \\frac{\\partial{}\\lambda_{k}}{\\partial{p_{i}}}=\\begin{bmatrix} \\frac{\\partial{{u_{k}}^{T}Au_{k}}}{\\partial{x_{i}}}\u0026 \\frac{\\partial{{u_{k}}^{T}Au_{k}}}{\\partial{y_{i}}}\u0026 \\frac{\\partial{{u_{k}}^{T}Au_{k}}}{\\partial{z_{i}}} \\end{bmatrix}=\\frac{\\partial{{u_{k}}^{T}Au_{k}}}{\\partial{p_{i}}}\\tag{式8} $$ 带入矩阵$A$和$\\bar{p}$的定义可得： $$ \\begin{align} \\frac{\\partial{}\\lambda_{k}}{\\partial{p_{j}}}=\\frac1N\\sum_{i=1}^N{\\frac{\\partial{{u_{k}}^{T}\\left({p}_j-\\bar{p}\\right)\\left(p_j-\\bar{p}\\right)^Tu_{k}}}{\\partial{p_{i}}}}\\\\ =\\frac1N\\sum_{j=1}^N{\\frac{\\partial{\\left({p}_j-\\bar{p}\\right)^{T}{u_{k}}{u_{k}}^{T}\\left(p_j-\\bar{p}\\right)}}{\\partial{p_{i}}}}\\\\ =\\frac1N\\sum_{j=1}^N{\\frac{\\partial\\left(\\left({u_{k}}^{T}\\left(p_j-\\bar{p}\\right)\\right)^{T}\\left({u_{k}}^{T}\\left(p_j-\\bar{p}\\right)\\right)\\right)}{\\partial{p_{i}}}}\\\\ =\\frac1N\\sum_{j=1}^N{2{\\left(p_j-\\bar{p}\\right)^{T}u_{k}}\\frac{\\partial{u_{k}}^{T}\\left(p_j-\\bar{p}\\right)}{\\partial{p_{i}}}}\\\\ =\\frac2N\\sum_{j=1}^N{{\\left(p_j-\\bar{p}\\right)^{T}u_{k}}\\frac{\\partial{u_{k}}^{T}\\left(p_j-\\bar{p}\\right)}{\\partial{p_{i}}}}\\\\ =\\frac2N\\sum_{j=1}^N{{\\left(p_j-\\bar{p}\\right)^{T}u_{k}}\\frac{\\partial{u_{k}}^{T}\\left(p_j-\\left(\\frac{1}{N}\\sum_{i=1}^{N}p_{i}\\right)\\right)}{\\partial{p_{i}}}}\\\\ =\\frac2N{{\\left(p_i-\\bar{p}\\right)^{T}u_{k}}{u_{k}}^{T}\\left(I-\\frac{1}{N}I\\right)}+\\\\\\frac2N\\sum_{j=1,j\\ne{i}}^N\\left(p_j-\\bar{p}\\right)^{T}u_{k}{u_{k}}^{T}\\left(-\\frac{1}{N}I\\right)\\\\ =\\frac2N{{\\left(p_i-\\bar{p}\\right)^{T}u_{k}}{u_{k}}^{T}\\left(I-\\frac{1}{N}I\\right)}+\\\\\\frac2Nu_{k}{u_{k}}^{T}\\left(-\\frac{1}{N}I\\right)\\sum_{j=1,j\\ne{i}}^N\\left(p_j-\\bar{p}\\right)^{T}\\\\ =\\frac2N{{\\left(p_i-\\bar{p}\\right)^{T}u_{k}}{u_{k}}^{T}\\left(I-\\frac{1}{N}I\\right)}+\\\\\\frac2Nu_{k}{u_{k}}^{T}\\left(-\\frac{1}{N}I\\right)\\left(\\left(\\sum_{j=1}^{N}(p_{j}-\\bar{p})^{T}\\right)-\\left(p_i-\\bar{p}\\right)^{T}\\right)\\\\ =\\frac2N{{\\left(p_i-\\bar{p}\\right)^{T}u_{k}}{u_{k}}^{T}\\left(I-\\frac{1}{N}I\\right)}+\\\\\\frac2Nu_{k}{u_{k}}^{T}\\left(-\\frac{1}{N}I\\right)\\left(0-\\left(p_i-\\bar{p}\\right)^{T}\\right)\\\\ =\\frac2N{{\\left(p_i-\\bar{p}\\right)^{T}u_{k}}{u_{k}}^{T}} \\end{align}\\tag{式9} $$ 其中涉及到以下公式： $$ \\frac{\\partial{p}_j}{\\partial{p}_i}={I},(i=j)\\quad\\frac{\\partial{p}_j}{\\partial{p}_i}={0},(i\\neq j) \\tag{式10} $$定理2 已知：\n$${A}=\\frac1N\\sum_{i=1}^N\\left({p}_i-\\bar{{p}}\\right)\\left({p}_i-\\bar{{p}}\\right)^T,\\bar{{p}}=\\frac{1}{N}\\sum_{i=1}^{N}{p}_{i}$$ 对于一组点$p_{i}\\left(i=1,\\dots,\\right)$和定义的协方差矩阵$A$,假设$A$具有对应于特征向量的$u_{k}\\left(k=1,2,3\\right)$,则有\n$$\\begin{aligned}\\frac{\\partial^{2}\\lambda_{k}}{\\partial{p}_{j}\\partial{p}_{i}}=\\begin{cases}\\frac{2}{N}\\biggl(\\frac{N-1}{N}{u}_{k}{u}_{k}^{T}+{u}_{k}({p}_{i}-\\bar{{p}})^{T}{U}{F}_{k}^{{p}_{j}}\\\\\\\\+{U}{F}_{k}^{{p}_{j}}\\biggl({u}_{k}^{T}({p}_{i}-\\bar{{p}})\\biggr)\\biggr),\\quad i=j\\\\\\\\\\frac{2}{N}\\biggl(-\\frac{1}{N}{u}_{k}{u}_{k}^{T}+{u}_{k}({p}_{i}-\\bar{{p}})^{T}{U}{F}_{k}^{{p}_{j}}\\\\\\\\+{U}{F}_{k}^{{p}_{j}}\\biggl({u}_{k}^{T}({p}_{i}-\\bar{{p}})\\biggr)\\biggr),\\quad i\\neq j\\end{cases}\\end{aligned}$$ $${F}_{k}^{{P}_{j}}=\\begin{bmatrix}{F}_{1,k}^{{P}_{j}}\\\\{F}_{2,k}^{{P}_{j}}\\\\{F}_{3,k}^{{P}_{j}}\\end{bmatrix}\\in\\mathbb{R}^{3\\times3},\\quad{U}=\\begin{bmatrix}{u}_{1}\u0026{u}_{2}\u0026{u}_{3}\\end{bmatrix}$$ $$\\left.{F}_{m,n}^{{P}_{j}}=\\left\\{\\begin{matrix}\\frac{({p}_{j}-\\bar{{p}})^{T}}{N(\\lambda_{n}-\\lambda_{m})}({u}_{m}{u}_{n}^{T}+{u}_{n}{u}_{m}^{T}),m\\neq n\\\\{0}_{1\\times3}\u0026,m=n\\end{matrix}\\right.\\right.$$ 证明如下： 已知协方差矩阵可被分解，且设$q$是点$p_{i}$的一个标量$x_{i},y_{i},z_{i}$之一，如下所示： $${A}={U}{\\Lambda}{U}^{T} \\tag{式1}$$ 首先对其求关于$q$的导数： $$\\frac{\\partial{A}}{\\partial q}=\\frac{\\partial}{\\partial q}\\left({U}{\\Lambda}{U}^{T}\\right)\\tag{式2}$$ 根据链式法则，右侧可以写为： $${\\frac{\\partial{A}}{\\partial q}}={\\frac{\\partial{U}}{\\partial q}}{\\Lambda}{U}^{T}+{U}{\\frac{\\partial{\\Lambda}}{\\partial q}}{U}^{T}+{U}{\\Lambda}{\\frac{\\partial{U}^{T}}{\\partial q}} $$ 由于$\\frac{\\partial{U}^{T}}{\\partial{q}}=\\left({\\frac{\\partial{U}}{\\partial q}}\\right)^{T}$,因此式2可以变为 $$\\begin{align} \\frac{\\partial{A}}{\\partial q}=\\frac{\\partial{U}}{\\partial q}{\\Lambda}{U}^T+{U}\\frac{\\partial{\\Lambda}}{\\partial q}{U}^T+{U}{\\Lambda}\\left(\\frac{\\partial{U}}{\\partial q}\\right)^T\\\\ \\Longrightarrow {U}^{T}{\\frac{\\partial{A}}{\\partial q}}{U}={U}^{T}{\\frac{\\partial{U}}{\\partial q}}{\\Lambda}+{\\frac{\\partial{\\Lambda}}{\\partial q}}+{\\Lambda}\\left({\\frac{\\partial{U}}{\\partial q}}\\right)^{T}{U} \\end{align}\\tag{式3}$$ 设$C^{q}=U^{T}\\frac{\\partial{U}}{\\partial q} $,因为$C^{q}$是反对称矩阵(由定理1的证明可知),所以有以下$C^{q}+{C^{q}}^{T}=0$,即${C^{q}}^{T}=-C^{q}$。代入式3可得： $$ {U}^{T}{\\frac{\\partial{A}}{\\partial q}}{U}={C}^{q}{\\Lambda}+{\\frac{\\partial{\\Lambda}}{\\partial q}}-{\\Lambda}{C}^{q} \\tag{式4}$$ 取$C^{q}$的m行，n列可得： $$ \\begin{align} \\left({U}^T\\frac{\\partial{A}}{\\partial q}{U}\\right)_{m,n}=\\left(\\frac{\\partial\\boldsymbol{\\Lambda}}{\\partial q}\\right)_{m,n}-\\left({\\Lambda}{C}^q-{C}^q{\\Lambda}\\right)_{m,n}\\\\ \\Longrightarrow \\left(\\frac{\\partial\\boldsymbol{\\Lambda}}{\\partial q}\\right)_{m,n}=\\left({U}^T\\frac{\\partial{A}}{\\partial q}{U}\\right)_{m,n}+\\left({\\Lambda}{C}^q-{C}^q{\\Lambda}\\right)_{m,n}\\\\ \\Longrightarrow 0=\\left({U}^T\\frac{\\partial{A}}{\\partial q}{U}\\right)_{m,n}+\\left({\\Lambda}{C}^q-{C}^q{\\Lambda}\\right)_{m,n}\\\\ \\Longrightarrow 0=u_{m}^{T}{\\frac{\\partial{A}}{\\partial{q}}}u_{n}+\\lambda_{m}C_{m,n}^{q}-C_{m,n}^{q}\\lambda_{n}\\\\ \\Longrightarrow C_{m,n}^{q}\\left(\\lambda_{m}-\\lambda_{n}\\right)=-u_{m}^{T}{\\frac{\\partial{A}}{\\partial{q}}}u_{n}\\\\ \\Longrightarrow {C}_{m,n}^q=\\frac{{u}_m^T\\frac{\\partial{A}}{\\partial q}{u}_n}{\\lambda_n-\\lambda_m}\u0026,(\\lambda_{m}\\ne\\lambda_{n}) \\end{align} \\tag{式5}$$ 取$C^{q}$的m行，m列,由于它是反对称矩阵，所以它的对角线元素为0，即： $$\\begin{align} {C}_{m,m}^q={u}_m^T\\frac{\\partial{u}_m}{\\partial q}\\\\ \\Longrightarrow {C}_{m,m}^q=0\u0026,(m=n) \\end{align}\\tag{式6}$$ 接下来求解$u_{k}$对$p_{j}$的三个分量的微积分： $$ \\begin{align} \\frac{\\partial u_{k}}{\\partial{q}}=\\frac{\\partial Ue_{k}}{\\partial q} =UU^{T}\\frac{\\partial U}{\\partial q}e_{k} =UC^{q}e_{k} \\end{align} \\tag{式7} $$ 其中$e_{k}$是3x1的向量，其中第k个元素是1，其它元素是0，这意味着： $$ C^{q}e_{k}=\\begin{bmatrix} C_{1,k}^{q}\\\\ C_{2,k}^{q}\\\\ C_{3,k}^{q} \\end{bmatrix} \\tag{式8}$$ 将$q$替换为$p_{j}$,并将式8代入可得： $$ \\begin{align} \\begin{aligned} \\frac{\\partial{u}_k}{\\partial{p}_j}\u0026 =\\begin{bmatrix}\\frac{\\partial{U}{e}_k}{\\partial x_j}\u0026\\frac{\\partial{U}{e}_k}{\\partial y_j}\u0026\\frac{\\partial{U}{e}_k}{\\partial z_j}\\end{bmatrix} \\\\ \u0026=\\begin{bmatrix}{U}{C}^{x_j}{e}_k\u0026{U}{C}^{y_j}{e}_k\u0026{U}{C}^{z_j}{e}_k\\end{bmatrix} \\\\ \u0026={U}\\big[{C}^{x_j}{e}_k\\quad{C}^{y_j}{e}_k\\quad{C}^{z_j}{e}_k\\big] \\\\ \u0026={U}\\begin{bmatrix}{C}_{1,k}^{x_j}\u0026{C}_{1,k}^{y_j}\u0026{C}_{1,k}^{z_j}\\\\{C}_{2,k}^{x_j}\u0026{C}_{2,k}^{y_j}\u0026{C}_{2,k}^{z_j}\\\\{C}_{3,k}^{x_j}\u0026{C}_{3,k}^{y_j}\u0026{C}_{3,k}^{z_j}\\end{bmatrix} \\end{aligned} \\end{align} \\tag{式9} $$ 结合式9和式5、6可有如下定义： $$ \\begin{align*} {F}_{m,n}^{{p}_{j}}= \\begin{bmatrix}{C}_{m,n}^{x_{j}}\u0026{C}_{m,n}^{y_{j}}\u0026{C}_{m,n}^{z_{j}}\\end{bmatrix}\\in\\mathbb{R}^{1\\times3},\\quad m,n\\in\\{1,2,3\\}.\\\\ =\\begin{cases} \\frac{{u}_m^T\\frac{\\partial{A}}{\\partial {p_{j}}}{u}_n}{\\lambda_n-\\lambda_m} , \\quad m\\ne n \\\\ 0,\\quad m=n \\end{cases} \\end{align*} \\tag{式10}$$将式10带入式9中可得： $$ \\frac{\\partial{u_{k}}}{\\partial{p_{j}}}= U\\begin{bmatrix} F_{1,k}^{p_{j}}\\\\ F_{2,k}^{p_{j}}\\\\ F_{3,k}^{p_{j}} \\end{bmatrix} =UF_{k}^{p_{j}}\\tag{式11}$$ 接下来对式10做以下化简，首先考虑$m\\ne n$的情况，过程如下所示： $$ \\begin{align*} \\frac{u_{m}^{T} \\frac{\\partial A }{\\partial p_{j}} u_{n}}{\\lambda_n -\\lambda_m}\\\\ =\\frac{1}{\\lambda_n -\\lambda_m}\\cdot u_{m}^{T} \\frac{\\partial A }{\\partial p_{j}} u_{n}\\\\ =\\frac{1}{\\lambda_n -\\lambda_m}\\cdot u_{m}^{T} \\frac{\\partial {\\left({A}=\\frac1N\\sum_{i=1}^N\\left({p}_i-\\bar{{p}}\\right)\\left({p}_i-\\bar{{p}}\\right)^T\\right)} }{\\partial p_{j}} u_{n}\\\\ =\\frac{1}{\\lambda_n -\\lambda_m}\\cdot\\left(\\frac{1}{N}\\sum_{i=1}^{N}\\frac{u_{m}^{T}\\left(p_{i}-\\bar{p}\\right)\\left(p_{i}-\\bar{p}\\right)^{T}u_{n}}{\\partial{p_j}}\\right)\\\\ =\\frac{1}{\\lambda_n -\\lambda_m} \\cdot\\frac{1}{N}\\sum_{i=1}^{N} \\left(\\frac{u_{m}^{T}\\left(p_{i}-\\bar{p}\\right)\\left(p_{i}-\\bar{p}\\right)^{T}u_{n}}{\\partial{\\left(p_{i}-\\bar{p}\\right)}}\\cdot\\frac{\\partial{\\left(p_{i}-\\bar{p}\\right)}}{\\partial{p_j}}\\right)\\\\ =\\frac{1}{\\lambda_n -\\lambda_m} \\cdot\\frac{1}{N}\\sum_{i=1}^{N} \\left(\\left(p_{i}-\\bar{p}\\right)^{T}\\left(u_{m}u_{n}^{T}+u_{n}u_{m}^{T}\\right)\\cdot\\frac{\\partial{\\left(p_{i}-\\bar{p}\\right)}}{\\partial{p_j}}\\right)\\\\ =\\frac{1}{\\lambda_n -\\lambda_m}\\\\ \\cdot\\frac{1}{N}\\sum_{i=1}^{N} \\left(\\left(p_{i}-\\bar{p}\\right)^{T}\\left(u_{m}u_{n}^{T}+u_{n}u_{m}^{T}\\right)\\cdot \\frac{\\partial{\\left(p_{i}-\\left(\\frac{1}{N}\\sum_{i=1}^{N}{p}_{i}\\right)\\right)}}{\\partial{p_j}}\\right)\\\\ =\\frac{1}{\\lambda_n -\\lambda_m}\\\\ \\cdot\\frac{1}{N}\\sum_{i=1}^{N} \\left(\\left(p_{i}-\\bar{p}\\right)^{T}\\left(u_{m}u_{n}^{T}+u_{n}u_{m}^{T}\\right)\\cdot \\frac{\\partial{\\left(p_{i}-\\left(\\frac{1}{N}\\sum_{i=1}^{N}{p}_{i}\\right)\\right)}}{\\partial{p_j}}\\right)\\\\ =\\frac{1}{\\lambda_n -\\lambda_m} \\frac{1}{N}\\left(p_{j}-\\bar{p}\\right)^{T}\\left(u_{m}u_{n}^{T}+u_{n}u_{m}^{T}\\right) \\cdot \\left(I-\\frac{1}{N}I\\right)\\\\ +\\frac{1}{N}\\sum_{i=1,i\\ne{j}}^{N}{\\left(\\left(p_{i}-\\bar{p}\\right)^{T}\\left(u_{m}u_{n}^{T}+u_{n}u_{m}^{T}\\right)\\cdot\\left(-\\frac{1}{N}I\\right)\\right)}\\\\ =\\frac{1}{\\lambda_n -\\lambda_m} \\frac{1}{N}\\left(p_{j}-\\bar{p}\\right)^{T}\\left(u_{m}u_{n}^{T}+u_{n}u_{m}^{T}\\right) \\cdot \\left(I-\\frac{1}{N}I\\right)\\\\ +\\left(u_{m}u_{n}^{T}+u_{n}u_{m}^{T}\\right)\\left(-\\frac{1}{N}I\\right) \\frac{1}{N}\\sum_{i=1,i\\ne{j}}^{N}\\left(p_{i}-\\bar{p}\\right)^{T}\\\\ =\\frac{1}{\\lambda_n -\\lambda_m} \\frac{1}{N}\\left(p_{j}-\\bar{p}\\right)^{T}\\left(u_{m}u_{n}^{T}+u_{n}u_{m}^{T}\\right) \\cdot\\left(I-\\frac{1}{N}I\\right)\\\\ +\\left(u_{m}u_{n}^{T}+u_{n}u_{m}^{T}\\right)\\left(-\\frac{1}{N}I\\right) \\left(\\left(\\sum_{i=1}^{N}(p_{i}-\\bar{p})^{T}\\right)-\\left(p_j-\\bar{p}\\right)^{T}\\right)\\\\ =\\frac{1}{\\lambda_n -\\lambda_m} \\frac{1}{N}\\left(p_{j}-\\bar{p}\\right)^{T}\\left(u_{m}u_{n}^{T}+u_{n}u_{m}^{T}\\right) \\cdot\\left(I-\\frac{1}{N}I\\right)\\\\ +\\left(u_{m}u_{n}^{T}+u_{n}u_{m}^{T}\\right)\\left(-\\frac{1}{N}I\\right) \\left(0-\\left(p_j-\\bar{p}\\right)^{T}\\right)\\\\ =\\frac{1}{\\lambda_n -\\lambda_m} \\frac{1}{N}\\left(p_{j}-\\bar{p}\\right)^{T}\\left(u_{m}u_{n}^{T}+u_{n}u_{m}^{T}\\right)\\\\ =\\frac{\\left(p_{j}-\\bar{p}\\right)^{T}}{\\left(\\lambda_n -\\lambda_m\\right)N}\\left(u_{m}u_{n}^{T}+u_{n}u_{m}^{T}\\right) \\end{align*} \\tag{式12}$$ 其中涉及到以下公式： $$ \\frac{\\partial{p}_j}{\\partial{p}_i}={I},(i=j)\\quad\\frac{\\partial{p}_j}{\\partial{p}_i}={0},(i\\neq j) \\tag{式13}$$$$ \\frac{\\partial {a}^\\top{x}{x}^\\top{b}}{\\partial {x}}={x}^\\top\\left({a}{b}^\\top+{b}{a}^\\top\\right) \\tag{式14}$$ 结合$m=n$的情况，${F}_{m,n}^{{p}_{j}}$的简化结果如下所示： $$ F_{m,n}^{p_{j}}= \\begin{cases} \\frac{\\left(p_{j}-\\bar{p}\\right)^{T}}{\\left(\\lambda_n -\\lambda_m\\right)N}\\left(u_{m}u_{n}^{T}+u_{n}u_{m}^{T}\\right),\\quad m\\ne n\\\\ 0,\\quad m=n \\end{cases} \\tag{式15}$$ 此时，开始求解二阶导数： $$ \\begin{align*} \\frac{\\partial}{\\partial{p_{j}}}\\left(\\frac{\\partial{\\lambda_k}}{\\partial{p_{i}}}\\right) =\\frac{\\partial{\\frac2N\\left({{\\left(p_i-\\bar{p}\\right)^{T}u_{k}}{u_{k}}^{T}}\\right)^{T}}}{\\partial{p_{j}}}\\\\ =\\frac{2}{N}\\cdot\\frac{\\partial{u_{k}{u_{k}}^{T}\\left(p_i-\\bar{p}\\right)}}{\\partial{p_{j}}}\\\\ =\\frac{2}{N}\\cdot\\left({\\frac{\\partial {u_{k}}}{\\partial{p_j}}u_{k}^{T}\\left(p_i-\\bar{p}\\right)}+u_{k}\\frac{\\partial{u_{k}^{T}\\left(p_i-\\bar{p}\\right)}}{p_j}\\right)\\\\ =\\frac{2}{N}\\cdot\\left(\\frac{\\partial {u_{k}}}{\\partial{p_j}}u_{k}^{T}\\left(p_i-\\bar{p}\\right) +u_{k}u_{k}^{T}\\frac{\\partial{\\left(p_i-\\bar{p}\\right)}}{p_j} +u_{k}\\left(p_i-\\bar{p}\\right)^{T}\\frac{\\partial{u_k}}{p_j}\\right)\\\\ =\\frac{2}{N}\\cdot\\left(UF_{k}^{p_j}u_{k}^{T}\\left(p_i-\\bar{p}\\right) +u_{k}u_{k}^{T}\\frac{\\partial{\\left(p_i-\\bar{p}\\right)}}{p_j} +u_{k}\\left(p_i-\\bar{p}\\right)^{T}UF_{k}^{p_j} \\right)\\\\ =\\begin{cases} \\frac{2}{N}\\cdot\\left(UF_{k}^{p_j}u_{k}^{T}\\left(p_i-\\bar{p}\\right) +u_{k}u_{k}^{T}\\frac{N-1}{N}I +u_{k}\\left(p_i-\\bar{p}\\right)^{T}UF_{k}^{p_j} \\right),\\quad i=j \\\\ \\frac{2}{N}\\cdot\\left(UF_{k}^{p_j}u_{k}^{T}\\left(p_i-\\bar{p}\\right) +u_{k}u_{k}^{T}\\frac{-1}{N}I +u_{k}\\left(p_i-\\bar{p}\\right)^{T}UF_{k}^{p_j} \\right),\\quad i \\ne j \\end{cases} \\end{align*} \\tag{式16} $$ 其中同样涉及到式13。\n推导过程 回顾代价函数为\n$$\\arg\\min_{\\mathcal{S},\\mathcal{E}_{L}}\\sum_{l}^{}\\lambda_{3}(A_{l})\\tag{式1}$$ ，优化问题是非线性的，通过迭代求解，每次迭代中，代价函数被二阶近似，具体的说，我们将$\\lambda_3$视为包含所有点${^G}p$的函数，其中 $^{G}p$是一个列向量，每个点$^{G}p_{k}\\in\\mathcal{P}_{l}$，即： $$ ^{G}p=\\begin{bmatrix}{^{G}p_{1}^{T}} \\quad {^{G}p_{2}^{T}} \\quad \\cdots \\quad {^{G}p_{N_{l}}^{T}} \\end{bmatrix}\\in\\mathbb{R} ^{3N_{l}} \\tag{式2} $$ 。$\\lambda{(^Gp)}$可被近似为： $$ \\lambda_{3}\\left(^{G}{p}+\\delta^{G}{p}\\right)\\approx\\lambda_{3}\\left(^{G}{p}\\right)+{J}\\cdot\\delta^{G}{p}+\\frac{1}{2} \\delta^{G}{p}^{T}\\cdot{H}\\cdot\\delta^{G}{p} \\tag{式3} $$假设第$k$个点$^Gp_{k}$在时间$t_j$由雷达$L_i$扫描，则有： $$ \\begin{align*} ^Gp_k={^{G}_{L_i}T}_{t_j}p_k={^{G}_{L_0}T}_{t_j}\\cdot {^{L_{0}}_{L_i}T}\\cdot p_{k}\\\\ ={^{G}_{L_0}R_{t_j}}\\left({^{L_0}_{L_i}R\\cdot {p_k}+{^{L_0}_{L_i}t}}\\right)+{^G_{L_0}t_{t_j}} \\end{align*} \\tag{式4} $$ 表明$^Gp_k$依赖于$\\mathcal{S}$和$\\mathcal{E}_L$。为了扰动$^Gp_k$,我们在位姿$T$的进行扰动， 记为$\\delta{T}=\\begin{bmatrix}\\phi{^T}\\quad\\delta{t}^T \\end{bmatrix}^T\\in\\mathbb{R}^6$， 于在流形上的扰动可以参考论文《A micro Lie theory for state estimation in robotics》。 $$ T=(R,t)\\quad ,T \\boxplus\\delta{T}=\\left(R\\exp(\\phi^{\\wedge} ),t+\\delta{t}\\right) \\tag{式5} $$ 。将上式带入到代价函数式1中，可得： $$ \\begin{align*} {}^{G}{p}_{k}+\\delta^{G}{p}_{k}= {}_{L_{0}}^{G}R_{t_{j}}\\exp\\big({}_{L_{0}}^{G}\\phi_{t_{j}}^{\\wedge}\\big) \\bigg({}_{L_{i}}^{L_{0}}R\\exp\\big({}_{L_{i}}^{L_{0}}\\phi^{\\wedge}\\big)p_{k} +{}_{L_{i}}^{L_{0}}{t}+\\delta_{L_{i}}^{L_{0}}{t}\\bigg)\\\\ +{}_{L_{0}}^{G}{t}_{t_{j}} +\\delta_{L_{0}}^{G}{t}_{t_{j}}\\\\ ={}_{L_{0}}^{G}R_{t_{j}}\\big(I+{}_{L_{0}}^{G}\\phi_{t_{j}}^{\\wedge}\\big) \\bigg({}_{L_{i}}^{L_{0}}R\\big(I+{}_{L_{i}}^{L_{0}}\\phi^{\\wedge}\\big)p_{k} +{}_{L_{i}}^{L_{0}}{t}+\\delta_{L_{i}}^{L_{0}}{t}\\bigg)\\\\ +{}_{L_{0}}^{G}{t}_{t_{j}}+\\delta_{L_{0}}^{G}{t}_{t_{j}}\\\\ ={}_{L_{0}}^{G}{R}_{t_{j}}\\big(I+{}_{L_{0}}^{G}\\phi_{t_{j}}^{\\wedge}\\big) \\bigg({}_{L_{i}}^{L_{0}}Rp_{k}+{}_{L_{i}}^{L_{0}}R{}_{L_{i}}^{L_{0}}\\phi^{\\wedge}p_{k} +{}_{L_{i}}^{L_{0}}{t}+\\delta_{L_{i}}^{L_{0}}{t}\\bigg)\\\\ +{}_{L_{0}}^{G}{t}_{t_{j}}+\\delta_{L_{0}}^{G}{t}_{t_{j}}\\\\ \\approx{}_{L_{0}}^{G}R_{t_{j}}\\big({}_{L_{i}}^{L_{0}}R\\cdot{p_{k}}+{}_{L_{0}}^{G}{t}_{t_{j}}\\big) +{}_{L_{0}}^{G}R_{t_{j}}\\big({}_{L_{i}}^{L_{0}}R{}_{L_{i}}^{L_{0}}\\phi^{\\wedge}p_{k} +\\delta_{L_{i}}^{L_{0}}{t}\\big)\\\\ +{}_{L_{0}}^{G}R_{t_{j}}{}_{L_{0}}^{G}\\phi_{t_{j}}^{\\wedge} \\bigg({}_{L_{i}}^{L_{0}}Rp_{k}+{}_{L_{i}}^{L_{0}}{t}\\bigg)\\\\ +{}_{L_{0}}^{G}{t}_{t_{j}}+\\delta_{L_{0}}^{G}{t}_{t_{j}}\\\\ \\approx{}_{L_{0}}^{G}R_{t_{j}}\\big({}_{L_{i}}^{L_{0}}R\\cdot{p_{k}} +{}_{L_{0}}^{G}{t}_{t_{j}}\\big)+{}_{L_{0}}^{G}{t}_{t_{j}} +{}_{L_{0}}^{G}R_{t_{j}}\\big(I\\cdot{}_{L_{i}}^{L_{0}}\\phi^{\\wedge}p_{k} +\\delta_{L_{i}}^{L_{0}}{t}\\big)\\\\ +{}_{L_{0}}^{G}R_{t_{j}}{}_{L_{0}}^{G}\\phi_{t_{j}}^{\\wedge} \\bigg({}_{L_{i}}^{L_{0}}Rp_{k} +{}_{L_{i}}^{L_{0}}{t}\\bigg)+\\delta_{L_{0}}^{G}{t}_{t_{j}}\\\\ \\approx{}_{L_{0}}^{G}R_{t_{j}}\\big({}_{L_{i}}^{L_{0}}R\\cdot{p_{k}} +{}_{L_{0}}^{G}{t}_{t_{j}}\\big)+{}_{L_{0}}^{G}{t}_{t_{j}}\\\\ -{}_{L_0}^GR_{t_j}\\left(p_k\\right)^{\\wedge}\\cdot_{L_i}^{L_0}\\phi+_{L_0}^GR_{t_j}\\delta_{L_i}^{L_0}t -{}_{L_{0}}^{G}R_{t_{j}}\\bigg({}_{L_{i}}^{L_{0}}Rp_{k} +{}_{L_{i}}^{L_{0}}{t}\\bigg)^{\\wedge}{}_{L_{0}}^{G}\\phi_{t_{j}}+\\delta_{L_{0}}^{G}{t}_{t_{j}} \\end{align*} \\tag{式6} $$ 然后，结合式4和式6可得$\\delta{^Gp_k}$，如下所示： $$ \\begin{align*} \\delta^{G}{p}_{k}\\approx-{}_{L_{0}}^{G}R_{t_{j}} \\big({}_{L_{i}}^{L_{0}}{R}{p}_{k}+{}_{L_{i}}^{L_{0}}{t}\\big)^{\\wedge}{}_{L_{0}}^{G}\\phi_{t_{j}} +\\delta_{L_{0}}^{G}{t}_{t_{j}}-\\\\{}_{L_{0}}^{G}R_{t_{j}}\\big({p}_{k}\\big)^{\\wedge}{}_{L_{i}}^{L_{0}}\\phi +{}_{L_{0}}^{G}{R}_{t_{j}}\\delta_{L_{i}}^{L_{0}}{t}\\\\ =D\\cdot \\delta x , \\end{align*} \\tag{式7} $$ 其中$\\delta{x}=\\begin{bmatrix}\\cdots \\quad {^G_{L_0}\\phi_{t_j}^{T}\\quad\\delta_{L_0}^{G}t_{t_j}^T}\\cdots{^{L_{0}}_{L_i}\\phi^{T}\\quad\\delta_{L_i}^{L_0}t^T} \\cdots\\end{bmatrix}^{T} \\ne\\mathbb{R}^{6\\left(m+n-2\\right)}$是优化变量$x=\\begin{bmatrix}\\cdots{_{L_0}^GR_{t_j} }\\quad{_{L_0}^{G}t_{t_j}}\\cdots{_{L_0}^{L_i}R}\\quad{_{L_0}^{L_i}t}\\cdots\\end{bmatrix}$的微小扰动。\n并且 $$\\begin{align*} D =\\begin{bmatrix}\\vdots\u0026\\vdots\\\\\\cdots {D}_{k,p}^{\\mathcal{S}}\u0026\\cdots {D}_{k,q}^{\\varepsilon_{L}}\u0026\\cdots\\\\\\vdots\u0026\\vdots\\end{bmatrix}\\in\\mathbb{R}^{3N_{l}\\times6(m+n-2)} \\\\ \\mathrm{D}_{k,p}^{\\mathcal{S}} \\begin{cases} \\begin{bmatrix}{-{}_{L_{0}}^{G}{R}_{t_{j}}}\\left({}_{L_{i}}^{L_{0}}{R}{p}_{k}+{}_{L_{i}}^{L_{0}}{t}\\right)^{\\wedge}\u0026{I}\\end{bmatrix},\\quad{\\mathrm{if} p=j}\\\\ {0}_{3\\times6},\\quad {else} \\end{cases}\\\\ \\mathrm{D}_{k,q}^{\\mathcal{E}_{L}} \\begin{cases} \\begin{bmatrix}{-{}_{L_{0}}^{G}{R}_{t_{j}}}{}_{L_{i}}^{L_{0}}{R}({p}_{k})^{\\wedge}\u0026{}_{L_{0}}^{G}{R}_{t_{j}}\\end{bmatrix},\\quad{\\mathrm{if~}q=i}\\\\ {0}_{3\\times6},\\quad {else} \\end{cases} \\end{align*} $$ 注意： 论文中的结果与推导有差异，下面是论文给的结果，待排查！ $$\\delta^{G}{p}_{k}\\approx{\\color{red}+}{}_{L_{0}}^{G}R_{t_{j}} \\big({}_{L_{i}}^{L_{0}}{R}{p}_{k}+{}_{L_{i}}^{L_{0}}{t}\\big)^{\\wedge}{}_{L_{0}}^{G}\\phi_{t_{j}} +\\delta_{L_{0}}^{G}{t}_{t_{j}}{\\color{red}+}\\\\{}_{L_{\\color{red}i}}^{G}R_{t_{j}}\\big({p}_{k}\\big)^{\\wedge}{}_{L_{i}}^{L_{0}}\\phi +{}_{L_{0}}^{G}{R}_{t_{j}}\\delta_{L_{i}}^{L_{0}}{t}$$上面用到一些近似化： $$ \\exp(\\phi^{\\wedge})\\approx I+\\phi^{\\wedge}\\tag{式8} $$ 结合式3到式7有以下结论： $$ \\begin{align*} \\begin{gathered} \\lambda_{3}({x}\\boxplus\\delta{x}) \\approx\\lambda_{3}({x})+{JD}\\delta{x}+\\frac{1}{2} \\delta{x}^{T}{D}^{T}{HD}\\delta{x} \\\\ =\\lambda_{3}({x})+{\\bar{J}}\\delta{x}+\\frac{1}{2}\\delta{x}^{T}{\\bar{H}}\\delta{x}. \\end{gathered} \\end{align*} \\tag{式9} $$ 根据定理1和定理2的结论可知：\n$J$为雅可比矩阵，其中第$i$个元素按照定理1计算； $H$为Hessian矩阵，其中第$i$行，第$j$列元素按照定理2计算。 并可得且LM算法的增量公式为$\\left(\\bar{H}(^{G}p+\\mu I)\\right)\\delta{^Gp^{\\ast}}=-\\bar{J}(^Gp)^T$。\n代码详解 工程实现并非直接按照上文的推算一步完成，而是拆分为三阶段完成,分别为优化主激光雷达位姿、优化每个副雷达到主雷达的外参以及联合优化所有雷达外参以及主雷达里程计。\n一阶段：优化主雷达位姿 第一阶段中先优化主雷达里程计。优化之前的初值可以靠纯激光里程计，或者借助其他传感器（如IMU和轮速）的方式获取，使用这个里程计堆叠主雷达的局部地图，并通过自适应提速化的方式提取面特征，通过八叉树递归的方式计算每一个体素的点面误差，构建局部地图的一致性评价指标；\n整理体素数据 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 /** * @brief 将体素推入某个结构（如容器）中 * 该函数主要用于处理一组三维点云数据，通过体素化处理后，提取有用信息 * @param origin_pc 原始点云数据的二维向量，每个元素是一个指向三维向量的指针 */ void push_voxel(std::vector\u0026lt;vector_vec3d *\u0026gt; \u0026amp;origin_pc) { uint points_size = 0; for (int i = 0; i \u0026lt; window_size; i++) if (!origin_pc[i]-\u0026gt;empty()) points_size++; if (points_size \u0026lt;= 1) return; // 定义变量以指定使用的过滤器数量 int filternum2use = 4; vector_vec3d *origin_point = new vector_vec3d(); std::vector\u0026lt;int\u0026gt; *window_num = new std::vector\u0026lt;int\u0026gt;(); // 预分配内存以提高性能 window_num-\u0026gt;reserve(filternum2use * window_size); origin_point-\u0026gt;reserve(filternum2use * window_size); // 遍历所有窗口，对非空点云计算中心点，并存储相关信息 for (int i = 0; i \u0026lt; window_size; i++) if (!origin_pc[i]-\u0026gt;empty()) get_center(*origin_pc[i], i, *origin_point, *window_num, filternum2use); origin_points.emplace_back(origin_point); window_nums.emplace_back(window_num); } /** * @brief 计算点云的中心点并添加到结果中 * * @param origin_pc 原始点云数据，每个点是一个三维向量 * @param cur_frame 当前帧数，用于标记窗口编号 * @param origin_point 存储计算得到的中心点，每个点是一个三维向量 * @param window_num 存储每个中心点对应的窗口编号 * @param filternum2use 用于计算中心点的点云数量 */ void get_center(vector_vec3d \u0026amp;origin_pc, int cur_frame, vector_vec3d \u0026amp;origin_point, std::vector\u0026lt;int\u0026gt; \u0026amp;window_num, int filternum2use) { size_t pt_size = origin_pc.size(); if (pt_size \u0026lt;= (size_t) filternum2use) { for (size_t i = 0; i \u0026lt; pt_size; i++) { origin_point.emplace_back(origin_pc[i]); window_num.emplace_back(cur_frame); } return; } Eigen::Vector3d center; double part = 1.0 * pt_size / filternum2use; // 遍历每个过滤点数区间计算中心点 for (int i = 0; i \u0026lt; filternum2use; i++) { // 计算当前区间的起始和结束位置 size_t np = part * i; size_t nn = part * (i + 1); center.setZero(); // 在当前区间内累加点坐标 for (size_t j = np; j \u0026lt; nn; j++) center += origin_pc[j]; // 计算当前区间的中心点 center = center / (nn - np); // 将中心点添加到结果中 origin_point.emplace_back(center); // 标记当前中心点的窗口编号 window_num.emplace_back(cur_frame); } } 计算雅可比矩阵和海森矩阵 由于仅优化轨迹，$D=\\frac{\\delta p}{\\delta T}$不同于2.2.4章节的公式7。具体如下 $$ D=\\begin{bmatrix} -{}^{G}_{L_0}R_{t_j}(p_k)^{T}\u0026I \\end{bmatrix}\\tag{式1} $$ 由于$\\frac{\\delta \\lambda}{\\delta p}$不变，所以$H$和$J$没有变换将其带入2.2.3章节的式9即可推导出$\\bar{J}$和$\\bar{H}$。 其中关于Hessian矩阵块的更新，以点$P(k,j)$为例推导如下其对$\\bar{H}_{00}$的更新如下： $$ \\begin{align*} \\bar{H}_{0,0}=D_{0,k}^{T}H_{k,j}D_{j,0}\\\\ =\\begin{bmatrix}-{}^{G}_{L_0}R_{t_j}(p_k)^{\\wedge}\u0026I\\end{bmatrix}^{T}H_{k,j}\\begin{bmatrix}-{}^{G}_{L_0}R_{t_j}(p_j)^{\\wedge}\u0026I\\end{bmatrix}\\\\ =\\begin{bmatrix} {}^{G}_{L_0}R_{t_j}(p_k)^{\\wedge} \\\\I\\end{bmatrix}H_{k,j}\\begin{bmatrix}-{}^{G}_{L_0}R_{t_j}(p_j)^{\\wedge}\u0026I\\end{bmatrix}\\\\ =\\begin{bmatrix} {}^{G}_{L_0}R_{t_j}(p_k)^{\\wedge}H_{k,j}\\\\H_{k,j}\\end{bmatrix}\\begin{bmatrix}-{}^{G}_{L_0}R_{t_j}(p_j)^{\\wedge}\u0026I\\end{bmatrix}\\\\ =\\begin{bmatrix} -{}^{G}_{L_0}R_{t_j}(p_k)^{\\wedge}H_{k,j}{}^{G}_{L_0}R_{t_j}(p_j)^{\\wedge}\u0026{}^{G}_{L_0}R_{t_j}(p_k)^{\\wedge}H_{k,j}\\\\ -H_{k,j} {}^{G}_{L_0}R_{t_j}(p_j)^{\\wedge}\u0026 H_{k,j} \\end{bmatrix} \\end{align*}\\tag{式2} $$ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 /** * 计算Hessian矩阵、转置的Jacobian矩阵和残差 * * 该函数是优化算法的一部分，用于计算给定姿势、平移和初始Hessian矩阵、 * Jacobian向量以及残差的更新值。它是基于输入数据执行迭代计算的关键步骤。 * * @param poses 姿态向量，表示每个窗口的旋转 * @param ts 平移向量，表示每个窗口的平移 * @param Hess Hessian矩阵，用于二阶优化方法 * @param JacT 转置的Jacobian矩阵，优化过程中的线性逼近 * @param residual 残差，衡量当前优化状态的误差 */ void calculate_HJ(vector_quad \u0026amp;poses, vector_vec3d \u0026amp;ts, Eigen::MatrixXd \u0026amp;Hess, Eigen::VectorXd \u0026amp;JacT, double \u0026amp;residual) { // 初始化Hessian矩阵、转置的Jacobian矩阵和残差 Hess.setZero(); JacT.setZero(); residual = 0; // 创建本地副本以避免重复计算 Eigen::MatrixXd _hess(Hess); Eigen::MatrixXd _jact(JacT); // 获取体素的数量 size_t voxel_size = origin_points.size(); // 遍历每个体素 for (size_t i = 0; i \u0026lt; voxel_size; i++) { // 获取当前体素的原始点和窗口数量 vector_vec3d \u0026amp;origin_pts = *origin_points[i]; std::vector\u0026lt;int\u0026gt; \u0026amp;win_num = *window_nums[i]; size_t pts_size = origin_pts.size(); // 初始化变量 Eigen::Vector3d vec_tran; vector_vec3d pt_trans(pts_size); std::vector\u0026lt;Eigen::Matrix3d\u0026gt; point_xis(pts_size); Eigen::Vector3d centor(Eigen::Vector3d::Zero()); Eigen::Matrix3d covMat(Eigen::Matrix3d::Zero()); // 遍历当前体素的所有点 for (size_t j = 0; j \u0026lt; pts_size; j++) { // 计算变换后的向量 vec_tran = poses[win_num[j]] * origin_pts[j]; // 计算并存储点的变换和反对称矩阵 point_xis[j] = -wedge(vec_tran); pt_trans[j] = vec_tran + ts[win_num[j]]; // 更新中心点和协方差矩阵 centor += pt_trans[j]; covMat += pt_trans[j] * pt_trans[j].transpose(); } // 计算协方差矩阵的平均值 double N = pts_size; covMat = (covMat - centor * centor.transpose() / N) / N; centor = centor / N; // 计算协方差矩阵的特征值和特征向量 Eigen::SelfAdjointEigenSolver\u0026lt;Eigen::Matrix3d\u0026gt; saes(covMat); Eigen::Vector3d eigen_value = saes.eigenvalues(); Eigen::Matrix3d U = saes.eigenvectors(); Eigen::Vector3d u[3]; for (int j = 0; j \u0026lt; 3; j++) u[j] = U.block\u0026lt;3, 1\u0026gt;(0, j); // 更新Jacobian矩阵 //损失函数降维之后优化的目标函数转为$\\arg min_{\\mathcal{S}，\\mathcal{E}_L}\\sum_{l}\\lambda_{3}{(A_l)}$ //其中$\\lambda_3$是矩阵A的最小特征值，u0即为最小特征值 Eigen::Matrix3d ukukT = u[0] * u[0].transpose(); Eigen::Vector3d vec_Jt; for (size_t j = 0; j \u0026lt; pts_size; j++) {//雅可比矩阵J和D的乘积的转置，见推导过程章节的式9 pt_trans[j] = pt_trans[j] - centor; vec_Jt = 2.0 / N * ukukT * pt_trans[j]; _jact.block\u0026lt;3, 1\u0026gt;(6 * win_num[j], 0) -= point_xis[j] * vec_Jt; _jact.block\u0026lt;3, 1\u0026gt;(6 * win_num[j] + 3, 0) += vec_Jt; } // 计算Hessian矩阵的辅助变量 Eigen::Matrix3d Hessian33; Eigen::Matrix3d F; std::vector\u0026lt;Eigen::Matrix3d\u0026gt; F_(3); for (size_t j = 0; j \u0026lt; 3; j++) { if (j == 0) {//定理2：公式10 $F_{m,n}^{p_j}$ n=0,m=0的情况 F_[j].setZero(); continue; } Hessian33 = u[j] * u[0].transpose(); //定理2：公式10 $F_{m,n}^{p_j}$ n=0,m!=0的情况 //注意此辅助函数缺乏$(p_i-\\bar{p})^T$，下面的公式会有补充 F_[j] = 1.0 / N / (eigen_value[0] - eigen_value[j]) * (Hessian33 + Hessian33.transpose()); } // 更新Hessian矩阵 Eigen::Matrix3d h33; size_t rownum, colnum; for (size_t j = 0; j \u0026lt; pts_size; j++) { for (int f = 0; f \u0026lt; 3; f++) //此时是完整的辅助变量F F.block\u0026lt;1, 3\u0026gt;(f, 0) = pt_trans[j].transpose() * F_[f]; F = U * F; //按照定义D的子项为3行6列，位置为k行j列。 colnum = 6 * win_num[j]; for (size_t k = 0; k \u0026lt; pts_size; k++) { //注意$u_{k}^{T}\\cdot{\\left(p_i-\\bar{p}\\right)}$是一个标量，所以可以挪到F前面，与文中公式16推导略有差异 Hessian33 = u[0] * (pt_trans[k]).transpose() * F + u[0].dot(pt_trans[k]) * F; rownum = 6 * win_num[k]; if (k == j) Hessian33 += (N - 1) / N * ukukT; else Hessian33 -= 1.0 / N * ukukT; Hessian33 = 2.0 / N * Hessian33; //到此完整的公式16，下文为$D^{T}HD$，是$\\bar{H}$，见3.1章节的公式2 //[-R(p_k)^{wedge} I]^{T} H_33 [-R(p_j)^{wedge} I] //= [(-R(p_k)^{wedge})^{T} H_33 [-R(p_j)^{wedge} I] // I^{T] //=[R(p_k)^{wedge}H_33 [-R(p_j)^{wedge} I] // I] //=[R(p_k)^{wedge}H_33 [-R(p_j)^{wedge} I] // H_33] //= [-R(p_k)^{wedge} H_33 R(p_j)^{wedge} R(p_k)^{wedge}H_33 // -H_33R(p_j)^{wedge} _hess.block\u0026lt;3, 3\u0026gt;(rownum + 3, colnum + 3) += Hessian33; h33 = Hessian33 * point_xis[j]; _hess.block\u0026lt;3, 3\u0026gt;(rownum + 3, colnum) += h33; _hess.block\u0026lt;3, 3\u0026gt;(rownum, colnum + 3) -= point_xis[k] * Hessian33; _hess.block\u0026lt;3, 3\u0026gt;(rownum, colnum) -= point_xis[k] * h33; } } // 更新残差 residual += eigen_value[0]; Hess += _hess; JacT += _jact; _hess.setZero(); _jact.setZero(); } } 二阶段：优化副雷达到主雷达的外参 将一阶段中优化出的主雷达里程计作为真值，对于每一个副雷达，使用主雷达里程计以及各副雷达到主雷达的外参将各个副雷达的点云投影回世界坐标系构成局部地图，并和一阶段中的地图叠在一起构成新的局部地图。和一阶段相同，对使用自适应体素化方法提取面特征，并对于每一个特征体素递归构建基于点面误差的一致性评价指标。\n由于主雷达轨迹固定，$D=\\frac{\\delta p}{\\delta T}$不同于2.2.4章节的公式7。具体如下 $$ \\begin{align*} {}^{G}{p}_{k}+\\delta^{G}{p}_{k}= {}_{L_{0}}^{G}R_{t_{j}} \\bigg({}_{L_{i}}^{L_{0}}R\\exp\\big({}_{L_{i}}^{L_{0}}\\phi^{\\wedge}\\big)p_{k} +{}_{L_{i}}^{L_{0}}{t}+\\delta_{L_{i}}^{L_{0}}{t}\\bigg) +{}_{L_{0}}^{G}{t}_{t_{j}}\\\\ \\approx{}{}_{L_{0}}^{G}R_{t_{j}} \\bigg({}_{L_{i}}^{L_{0}}R\\big(I+{}_{L_{i}}^{L_{0}}\\phi^{\\wedge}\\big)p_{k} +{}_{L_{i}}^{L_{0}}{t}+\\delta_{L_{i}}^{L_{0}}{t}\\bigg) +{}_{L_{0}}^{G}{t}_{t_{j}}\\\\ \\approx{}{}_{L_{0}}^{G}{R}_{t_{j}} \\bigg({}_{L_{i}}^{L_{0}}Rp_{k}+{}_{L_{i}}^{L_{0}}R{}_{L_{i}}^{L_{0}}\\phi^{\\wedge}p_{k} +{}_{L_{i}}^{L_{0}}{t}+\\delta_{L_{i}}^{L_{0}}{t}\\bigg) +{}_{L_{0}}^{G}{t}_{t_{j}}\\\\ \\approx{}_{L_{0}}^{G}R_{t_{j}}\\big({}_{L_{i}}^{L_{0}}R\\cdot{p_{k}}+{}_{L_{0}}^{G}{t}_{t_{j}}\\big) +{}_{L_{0}}^{G}R_{t_{j}}\\big({}_{L_{i}}^{L_{0}}R{}_{L_{i}}^{L_{0}}\\phi^{\\wedge}p_{k} +\\delta_{L_{i}}^{L_{0}}{t}\\big) +{}_{L_{0}}^{G}{t}_{t_{j}}\\\\ \\approx{}_{L_{0}}^{G}R_{t_{j}}\\big({}_{L_{i}}^{L_{0}}R\\cdot{p_{k}}+{}_{L_{0}}^{G}{t}_{t_{j}}\\big) +{}_{L_{0}}^{G}{t}_{t_{j}} +{}_{L_{0}}^{G}R_{t_{j}}\\big({}_{L_{i}}^{L_{0}}R{}_{L_{i}}^{L_{0}}\\phi^{\\wedge}p_{k} +\\delta_{L_{i}}^{L_{0}}{t}\\big)\\\\ \\approx{}_{L_{0}}^{G}R_{t_{j}}\\big({}_{L_{i}}^{L_{0}}R\\cdot{p_{k}}+{}_{L_{0}}^{G}{t}_{t_{j}}\\big) +{}_{L_{0}}^{G}{t}_{t_{j}} +{}_{L_{0}}^{G}R_{t_{j}}\\big(-{}_{L_{i}}^{L_{0}}R{p_k}^{\\wedge}{}_{L_{i}}^{L_{0}}\\phi +\\delta_{L_{i}}^{L_{0}}{t}\\big) \\end{align*} \\tag{式1} $$ 则可推导对应$\\delta^{G}{p}_{k}$的表达式： $$ \\delta^{G}{p}_{k}={}_{L_{0}}^{G}R_{t_{j}}\\big((-{}_{L_{i}}^{L_{0}}R{p_k})^{\\wedge}{}_{L_{i}}^{L_{0}}\\phi +\\delta_{L_{i}}^{L_{0}}{t}\\big)\\tag{式2} $$ 因此可得： $$ D=\\frac{\\delta p}{\\delta T}=\\begin{bmatrix} -{}_{L_{0}}^{G}R_{t_{j}}({}_{L_{i}}^{L_{0}}R{p_k})^{\\wedge}\u0026 {}_{L_{0}}^{G}R_{t_{j}} \\end{bmatrix} $$ 由于$\\frac{\\delta \\lambda}{\\delta p}$不变，所以$H$和$J$没有变换将其带入2.2.3章节的式9即可推导出$\\bar{J}$和$\\bar{H}$。 其中关于Hessian矩阵块的更新，以点$P(k,j)$为例推导如下其对$\\bar{H}_{00}$的更新如下： $$ \\begin{align*} \\bar{H}_{0,0}=D_{0,k}^{T}H_{k,j}D_{j,0}\\\\ =\\begin{bmatrix}-{}_{L_{0}}^{G}R_{t_{j}}({}_{L_{i}}^{L_{0}}R{p_k})^{\\wedge}\u0026{}_{L_{0}}^{G}R_{t_{j}}\\end{bmatrix}^{T} H_{k,j} \\begin{bmatrix}-{}_{L_{0}}^{G}R_{t_{j}}({}_{L_{i}}^{L_{0}}R{p_j})^{\\wedge}\u0026{}_{L_{0}}^{G}R_{t_{j}}\\end{bmatrix}\\\\ =\\begin{bmatrix} ({}_{L_{i}}^{L_{0}}R{p_k})^{\\wedge}{}_{L_{0}}^{G}R_{t_{j}}^{T} \\\\{{}_{L_{0}}^{G}R_{t_{j}}}^{T}\\end{bmatrix} H_{k,j} \\begin{bmatrix}-{}_{L_{0}}^{G}R_{t_{j}}({}_{L_{i}}^{L_{0}}R{p_j})^{\\wedge}\u0026{}_{L_{0}}^{G}R_{t_{j}}\\end{bmatrix}\\\\ =\\begin{bmatrix} ({}_{L_{i}}^{L_{0}}R{p_k})^{\\wedge}{}_{L_{0}}^{G}R_{t_{j}}^{T}H_{k,j}\\\\{{}_{L_{0}}^{G}R_{t_{j}}}^{T}H_{k,j}\\end{bmatrix} \\begin{bmatrix}-{}_{L_{0}}^{G}R_{t_{j}}({}_{L_{i}}^{L_{0}}R{p_j})^{\\wedge}\u0026{}_{L_{0}}^{G}R_{t_{j}}\\end{bmatrix}\\\\ =\\begin{bmatrix} -({}_{L_{i}}^{L_{0}}R{p_k})^{\\wedge}{}_{L_{0}}^{G}R_{t_{j}}^{T}H_{k,j}{}_{L_{0}}^{G}R_{t_{j}}({}_{L_{i}}^{L_{0}}R{p_j})^{\\wedge}\u0026({}_{L_{i}}^{L_{0}}R{p_k})^{\\wedge}{}_{L_{0}}^{G}R_{t_{j}}^{T}H_{k,j}{}_{L_{0}}^{G}R_{t_{j}}\\\\ -{{}_{L_{0}}^{G}R_{t_{j}}}^{T}H_{k,j}{}_{L_{0}}^{G}R_{t_{j}}({}_{L_{i}}^{L_{0}}R{p_j})^{\\wedge} \u0026 {{}_{L_{0}}^{G}R_{t_{j}}}^{T}H_{k,j}{}_{L_{0}}^{G}R_{t_{j}} \\end{bmatrix} \\end{align*}\\tag{式3} $$ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 //节选自第二阶段的calculate_HJ函数 //公式推导见公式3 _hess.block\u0026lt;3, 3\u0026gt;(rownum + 3, colnum + 3) += poses[refwin_num[k]].toRotationMatrix().transpose() * Hessian33 * poses[refwin_num[j]].toRotationMatrix(); _hess.block\u0026lt;3, 3\u0026gt;(rownum + 3, colnum) += poses[refwin_num[k]].toRotationMatrix().transpose() * Hessian33 * poses[refwin_num[j]].toRotationMatrix() * point_xis[j]; _hess.block\u0026lt;3, 3\u0026gt;(rownum, colnum + 3) -= point_xis[k] * poses[refwin_num[k]].toRotationMatrix().transpose() * Hessian33 * poses[refwin_num[j]].toRotationMatrix(); _hess.block\u0026lt;3, 3\u0026gt;(rownum, colnum) -= point_xis[k] * poses[refwin_num[k]].toRotationMatrix().transpose() * Hessian33 * poses[refwin_num[j]].toRotationMatrix() * point_xis[j]; 三阶段：联合优化雷达外参和主激光雷达里程计 使用主雷达里程计以及各副雷达到主雷达的外参将各个副雷达的点云投影回世界坐标系构成局部地图，将所有雷达的局部地图堆叠在一起构成新的局部地图。同样的，对于这个局部地图构建基于点面误差的损失函数。\n参考文献 [1]《Targetless Extrinsic Calibration of Multiple Small FoV LiDARs and Cameras using Adaptive Voxelization》\n[2]《BALM: Bundle Adjustment for Lidar Mapping》\n[3]《BALM论文阅读》——epsilonjohn的博客文章\n[4]《A micro Lie theory for state estimation in robotics》\n[5]《多个LiDAR-Camera无目标跨视角联合标定方法》\n","date":"2024-09-11T09:05:20+08:00","image":"https://wzwan-developer.github.io/p/mlcc/01/lidar_voxel_hu16969779438898434220.png","permalink":"https://wzwan-developer.github.io/p/mlcc/01/","title":"Chapter 01: Multi-LiDAR Extrinsic Calibration"},{"content":"概率论中的“矩” 彩票的问题 假设福利彩票，每一注两元钱，且中奖的概率分布如下： 其中，概率的“称”如下所示： 此时我们称量一下中奖500万元： 上述结果表明：不确定的500万元等价于确定的0.5元。此时将所有的中奖概率刻画上去： 上述结果等于\n$$1.5 = 5\\times 10\\% + 100\\times0.5\\% + 5000000\\times0.000001\\% $$ 结果表明一张彩票成本两元，但是期望获得的收益为1.5元，每买一张都会亏损0.5元。\n“矩” 一阶矩 上述我们计算的就是概率的一阶矩，也就是期望（expectation/mean）。 $$ E[X]=\\sum p_{i}x_{i} $$含义如下： 二阶矩 二阶矩是广为认知的协方差矩阵$\\Sigma$ $$ \\Sigma=E[(X-\\mu)^{2}]=\\sum_{i}p_{i}(x_{i}-\\mu)^{2} $$高阶矩 三阶矩称为偏度，四阶矩称为峰度。各有用途但是共同的特点为称量之后才能使用。\n参考链接 [1]如何理解概率论中的“矩”？\n","date":"2024-09-09T11:12:48+08:00","image":"https://wzwan-developer.github.io/p/state_estimation_for_robotics/2_03/gaussian-normal-distribution-graph_hu15871502155684369944.png","permalink":"https://wzwan-developer.github.io/p/state_estimation_for_robotics/2_03/","title":"如何理解概率论中的“矩”"},{"content":"舒尔补定义 给定任意的矩阵块 $M$ ，如下所示：\n$$M=\\begin{bmatrix} A \u0026 B\\\\ C \u0026D\\\\ \\end{bmatrix}$$ 如果，矩阵块 $D$ 是可逆的，则 $A − B D^{-1} C$称之为 $D$ 关于 $M$的舒尔补。 如果，矩阵块 $A$ 是可逆的，则 $D − CA^{-1} B$称之为 $A$ 关于 $M$的舒尔补。 舒尔补的定理推导 将$M$矩阵分别变成上三角或者下三角： $$\\begin{bmatrix}I \u0026 0\\\\ -CA^{-1} \u0026I\\\\\\end{bmatrix} \\begin{bmatrix}A \u0026 B\\\\ C \u0026 D\\end{bmatrix}=\\begin{bmatrix}A \u0026 B\\\\ 0 \u0026 \\Delta _{A}\\end{bmatrix}$$$$\\begin{bmatrix}A \u0026 B\\\\ C\u0026D\\end{bmatrix} \\begin{bmatrix}I \u0026 -A^{-1}B\\\\ 0\u0026I\\\\\\end{bmatrix}= \\begin{bmatrix}A \u0026 0\\\\ C \u0026 \\Delta _{A}\\end{bmatrix}$$其中${\\Delta _{A} =D-CA^{-1}B }$。联合起来，将${M}$变形为对角形： $$\\begin{bmatrix}I \u0026 0\\\\ -CA^{-1} \u0026I\\\\\\end{bmatrix} \\begin{bmatrix}A \u0026 B\\\\ C \u0026 D\\end{bmatrix} \\begin{bmatrix}I \u0026 -A^{-1}B\\\\ 0\u0026I\\\\\\end{bmatrix}= \\begin{bmatrix}A \u0026 0\\\\ 0 \u0026 \\Delta _{A}\\end{bmatrix} $$ 反过来亦可从对角矩阵恢复${M}$: $$\\begin{bmatrix}I \u0026 0\\\\ CA^{-1} \u0026I\\\\\\end{bmatrix} \\begin{bmatrix}A \u0026 0\\\\ 0\u0026 \\Delta _{A}\\end{bmatrix} \\begin{bmatrix}I \u0026 A^{-1}B\\\\ 0\u0026I\\\\\\end{bmatrix}= \\begin{bmatrix}A \u0026 B\\\\ C \u0026 D\\ \\end{bmatrix} $$用途 快速求矩阵的逆 矩阵${M}$可以改写为： $$M=\\begin{bmatrix}A \u0026 B\\\\ C\u0026D\\end{bmatrix}=\\begin{bmatrix}I \u0026 0\\\\ CA^{-1} \u0026I\\\\\\end{bmatrix} \\begin{bmatrix}A \u0026 0\\\\ 0\u0026 \\Delta _{A}\\end{bmatrix} \\begin{bmatrix}I \u0026 A^{-1}B\\\\ 0\u0026I\\\\\\end{bmatrix}$$$$M^{-1}=\\begin{bmatrix}A \u0026 B\\\\ C\u0026D\\end{bmatrix}^{-1}=\\begin{bmatrix}I \u0026 0\\\\ CA^{-1} \u0026I\\\\\\end{bmatrix}^{-1}\\begin{bmatrix}A^{-1} \u0026 0\\\\ 0\u0026 \\Delta _{A}^{-1}\\end{bmatrix}\\begin{bmatrix}I \u0026 A^{-1}B\\\\ 0\u0026I\\\\\\end{bmatrix}^{-1}\\\\ =\\begin{bmatrix}I \u0026 0\\\\ -CA^{-1} \u0026I\\\\\\end{bmatrix}\\begin{bmatrix}A^{-1} \u0026 0\\\\ 0\u0026 \\Delta _{A}^{-1}\\end{bmatrix}\\begin{bmatrix}I \u0026 -A^{-1}B\\\\ 0\u0026I\\\\\\end{bmatrix}\\\\=\\begin{bmatrix}A^{-1}+A^{-1}B{\\Delta _A}^{-1}CA^{-1}\u0026-A^{-1}B{\\Delta _A}^{-1}\\\\-{\\Delta _A}^{-1}CA^{-1}\u0026{\\Delta _A}^{-1} \\end{bmatrix} $$舒尔补在信息矩阵求解中的使用 协方差矩阵\n$$\\sum=\\begin{bmatrix}A \u0026 C^{T}\\\\C\u0026D\\end{bmatrix}$$, 则信息矩阵\n$$\\sum^{-1}=\\begin{bmatrix}A\u0026C^{T}\\\\C\u0026D\\end{bmatrix}^{-1}\\\\=\\begin{bmatrix}A^{-1}+A^{-1}C^{T}{\\Delta _A}^{-1}CA^{-1}\u0026-A^{-1}C^{T}{\\Delta _A}^{-1}\\\\-{\\Delta _A}^{-1}CA^{-1}\u0026{\\Delta _A}^{-1} \\end{bmatrix}\\\\\\stackrel{\\triangle}{=}\\begin{bmatrix}\\Lambda_{aa}\u0026\\Lambda _{ab}\\\\\\Lambda _{ba}\u0026\\Lambda _{bb} \\end{bmatrix}$$ 其中，由上式可推导得$A^{-1}=\\Lambda _{aa}-\\Lambda _{ab}\\Lambda _{bb}^{-1}\\Lambda _{ba}$, 以及$D^{-1}=\\Lambda _{bb}-\\Lambda _{ba}\\Lambda _{aa}^{-1}\\Lambda _{ab}$，它们即为下次优化会使用的先验信息矩阵（边际概率的信息矩阵）。\n通过舒尔补分解多元高斯分布 假设多元变量$M$服从高斯分布，且由两部分组成：\n$$ x=\\begin{bmatrix}a\\\\b\\end{bmatrix} $$,变量构成的协方差矩阵等于\n$$\\sum=\\begin{bmatrix} A \u0026 C^{T} \\\\C\u0026D \\end{bmatrix}$$,其中$A=cov(a,a)$,$C=cov(a,b)$,$D=cov(b,b)$。 则$x$的概率分布为： $$P(a,b)=P(a)P(b|a)\\propto exp(-\\frac{1}{2} \\begin{bmatrix}a\\\\b\\end{bmatrix}^{T}\\begin{bmatrix}A\u0026C^{T}\\\\C\u0026D\\end{bmatrix}^{-1}\\begin{bmatrix}a\u0026b\\end{bmatrix})$$。使用上一节内容将矩阵转化为对角矩阵 $$ \\begin{align} P(a,b) \\\\ \\propto exp\\left ( -\\frac{1}{2}\\begin{bmatrix}a\\\\b\\end{bmatrix}^{T}\\begin{bmatrix}A\u0026C^{T}\\\\C\u0026D\\end{bmatrix}^{-1}\\begin{bmatrix}a\u0026b\\end{bmatrix}\\right) \\\\ \\propto exp \\left( -\\frac{1}{2}\\begin{bmatrix}a\\\\b\\end{bmatrix}^{T}\\begin{bmatrix}I \u0026 0\\\\ -CA^{-1} \u0026I\\\\\\end{bmatrix}\\begin{bmatrix}A^{-1} \u0026 0\\\\ 0\u0026 \\Delta _{A}^{-1}\\end{bmatrix}\\begin{bmatrix}I \u0026 -A^{-1}B\\\\ 0\u0026I\\\\\\end{bmatrix}\\begin{bmatrix}a\u0026b\\end{bmatrix})\\right )\\\\ \\propto exp\\left( -\\frac{1}{2}\\begin{bmatrix}a^{T}\u0026(b-CA^{-1}a)^{T}\\end{bmatrix}\\begin{bmatrix}A^{-1}\u00260\\\\0\u0026{\\Delta _A^{-1}}\\end{bmatrix}\\begin{bmatrix}a\\\\b-CA^{-1}a\\end{bmatrix}\\right)\\\\ \\propto exp \\left( -\\frac{1}{2}(a^TA^{-1}a)+(b-CA^{-1}a)^{T} \\Delta _A^{-1}(b-CA^{-1}a) \\right)\\\\ \\propto exp \\left( -\\frac{1}{2}a^{T}A^{-1}a\\right)exp \\left ( -\\frac{1}{2}(b-CA^{-1}a)^{T}\\Delta _A^{-1}(b-CA^{-1}a)\\right)\\\\ \\propto P(a)P(b|a) \\\\\\end{align}$$ 在《机器人学中的状态估计》2.2.3章节\u0026quot;联合概率密度函数，分解与推断\u0026quot;可见相似内容,其实就是高斯推断，套用相关模型$P(a)$是观测（边际概率），$P(b|a)$是后验概率，$P(a|b)$是传感器模型。\n","date":"2024-09-02T23:51:06+08:00","image":"https://wzwan-developer.github.io/p/state_estimation_for_robotics/2_02/gaussian-normal-distribution-graph_hu15871502155684369944.png","permalink":"https://wzwan-developer.github.io/p/state_estimation_for_robotics/2_02/","title":"舒尔补"},{"content":"从优化角度理解边缘化 模型 优化问题具有如下通用形式： $ HX=b $ 并且可以拆解成如下的形式： $$\\begin{bmatrix}H_{mm}\u0026H_{mr}\\\\H_{rm}\u0026H_{rr}\\end{bmatrix}\\begin{bmatrix}X_m\\\\X_r\\end{bmatrix}=\\begin{bmatrix}b_m\\\\b_r\\end{bmatrix} $$ 拆解的目的是通过边缘化将$X_m$从状态量里删除掉，但是要保留它的约束。在划窗模式里，这个$X_m$为要边缘化掉的量。\n过程 对$H$矩阵利用舒尔补 进行三角化，如下所示： $$\\begin{bmatrix}I\u00260\\\\-H_{rm}H_{mm}^{-1}\u0026I\\end{bmatrix}\\begin{bmatrix}H_{mm}\u0026H_{mr}\\\\H_{rm}\u0026H_{rr}\\end{bmatrix}\\begin{bmatrix}X_m\\\\X_r\\end{bmatrix}=\\begin{bmatrix}I\u00260\\\\-H_{rm}H_{mm}^{-1}\u0026I\\end{bmatrix}\\begin{bmatrix}b_m\\\\b_r\\end{bmatrix}$$ 化简可得： $$\\begin{bmatrix}H_{mm}\u0026H_{mr}\\\\0\u0026H_{rr}-H_{rm}H_{mm}^{-1}H_{mr}\\end{bmatrix}\\begin{bmatrix}X_m\\\\X_r\\end{bmatrix}=\\begin{bmatrix}b_m\\\\b_r-H_{rm}H_{mm}^{-1}b_m\\end{bmatrix}$$ 由上式可得： $$(H_{rr}-H_{rm}H_{mm}^{-1}H_{mr})X_r=b_r-H_{rm}H_{mm}^{-1}b_{m}$$ 意义：此时可以不依赖$X_m$求解出$X_r$,若我们只关心$X_r$的值，则可以把$X_m$从模型中删除。\n从滤波角度理解边缘化 模型 运动模型和观测模型定义（可见《机器人学中的状态估计》3.3.1 ”问题定义“章节） 如下： $$\\begin{align} x_k=A_{k-1}x_{k-1}+v_k+w_k,\u0026k=1...K\\\\ y_k=C_kx_k+n_k,\u0026k=0...K \\end{align}$$MAP估计角度 优化目标函数定义（详情参考《机器人学中的状态估计》3.1.2 \u0026ldquo;最大后验估计\u0026rdquo; 章节）如下： $$\\hat{x}=arg\\underset{x}{min} J(x)$$ 其中$J(x)=\\sum_{k=0}^{K}(J_{v,k}(x)+J_{y,k}(x)$,$J_{v,k}(x))$见式(3.9.a),$J_{y,k}(x)$见式(3.9.b)。 再次对形式进行以下提升，将所有时刻的状态整理为向量x,并把所有时刻已知数据整理为z。对问题进行一定的简化，可得 $J(x)=\\frac{1}{2}\\left(z-Hx \\right)^{T}W^{-1}(z-Hx)$（式3.14） 对其进行求解最小值，可求解它的一阶导数，并使一阶导为0； $${\\frac{\\partial J(x)}{\\partial x^{T}}}|_x=-H^{T}W^{-1}(z-H\\hat{x})=0 \\Rightarrow (H^{T}W^{-1}H)\\hat{x}=H^{T}W^{-1}z$$ 注：此时形式以及是接近优化角度的$HX=b$。\n滤波角度 由于马尔可夫性，当前时刻仅与前一时刻有关，由此再次参考 3.3.2章节 \u0026ldquo;通过MAP推导卡尔曼滤波\u0026rdquo;， 假设已经有了k-1时刻的后验估计\n$$ \\{ \\hat {x}_{k-1} ,\\hat{P}_{k-1}\\}$$,目标是计算\n$$ \\{ \\hat {x}_{k} ,\\hat{P}_{k}\\}$$，我们使用k-1时刻的后验估计加上k时刻的$v_k$,$y_k$来估计\n$$ \\{ \\hat {x}_{k} ,\\hat{P}_{k}\\}$$。 为了推导该过程，定义 $$ z=\\begin{bmatrix}\\hat{x}_{k-1}\\\\v_k\\\\y_k\\end{bmatrix},H=\\begin{bmatrix}I\u0026\u0026\\\\-A_{k-1}\u0026I\\\\\u0026\u0026C_{k}\\end{bmatrix},W=\\begin{bmatrix}\\hat {P}_{k-1}\u0026\u0026\\\\\u0026Q_k\u0026\\\\\u0026\u0026R_k\\end{bmatrix}$$ 则模型的解为\n$$(H_{k}^{T}W_{k}^{-1}H_{k})\\hat{x}=H_{k}^{T}W_{k}^{-1}z_k$$， 其中\n$$\\hat{x}=\\begin{bmatrix}\\hat{x'}_{k-1}\\\\\\hat{x}_k\\end{bmatrix}$$ 借助本文第一节，目标为从$x$变量中删除$\\hat{x'}_{k-1}$，执行舒尔补可得 ","date":"2024-09-02T00:00:00Z","image":"https://wzwan-developer.github.io/p/state_estimation_for_robotics/2_01/gaussian-normal-distribution-graph_hu15871502155684369944.png","permalink":"https://wzwan-developer.github.io/p/state_estimation_for_robotics/2_01/","title":"边缘化"}]